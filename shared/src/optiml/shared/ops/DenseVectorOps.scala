package optiml.shared.ops

import scala.reflect.{Manifest,SourceContext}
import scala.virtualization.lms.common.{Base,BaseExp,EffectExp,BaseFatExp}
import scala.virtualization.lms.common.{ScalaGenBase,ScalaGenEffect,ScalaGenFat,CudaGenFat,CGenFat}
import scala.virtualization.lms.util._
import scala.virtualization.lms.internal._
import optiml.shared._
import optiml.shared.ops._
import optiml.shared.typeclass._

/**
 * Operations
 */

trait DenseVectorOpsBase extends Base {
  this: OptiML => 

  implicit def tupleToDense2[A:Manifest,B](t: Tuple2[A,B])(implicit __pos: SourceContext,__imp0: Reppable[B,A]): Rep[DenseVector[A]] = { DenseVector[A](unit(t._1),__imp0.view(t._2)) }
  implicit def repTupleToDense2[A:Manifest,B](t: Tuple2[Rep[A],B])(implicit __pos: SourceContext,__imp0: Reppable[B,A]): Rep[DenseVector[A]] = { DenseVector[A](t._1,__imp0.view(t._2)) }
  implicit def varTupleToDense2[A:Manifest,B](t: Tuple2[Var[A],B])(implicit __pos: SourceContext,__imp0: Reppable[B,A]): Rep[DenseVector[A]] = { DenseVector[A](readVar(t._1),__imp0.view(t._2)) }
  implicit def tupleToDense3[A:Manifest,B,C](t: Tuple3[A,B,C])(implicit __pos: SourceContext,__imp0: Reppable[B,A],__imp1: Reppable[C,A]): Rep[DenseVector[A]] = { DenseVector[A](unit(t._1),__imp0.view(t._2),__imp1.view(t._3)) }
  implicit def repTupleToDense3[A:Manifest,B,C](t: Tuple3[Rep[A],B,C])(implicit __pos: SourceContext,__imp0: Reppable[B,A],__imp1: Reppable[C,A]): Rep[DenseVector[A]] = { DenseVector[A](t._1,__imp0.view(t._2),__imp1.view(t._3)) }
  implicit def varTupleToDense3[A:Manifest,B,C](t: Tuple3[Var[A],B,C])(implicit __pos: SourceContext,__imp0: Reppable[B,A],__imp1: Reppable[C,A]): Rep[DenseVector[A]] = { DenseVector[A](readVar(t._1),__imp0.view(t._2),__imp1.view(t._3)) }
  implicit def tupleToDense4[A:Manifest,B,C,D](t: Tuple4[A,B,C,D])(implicit __pos: SourceContext,__imp0: Reppable[B,A],__imp1: Reppable[C,A],__imp2: Reppable[D,A]): Rep[DenseVector[A]] = { DenseVector[A](unit(t._1),__imp0.view(t._2),__imp1.view(t._3),__imp2.view(t._4)) }
  implicit def repTupleToDense4[A:Manifest,B,C,D](t: Tuple4[Rep[A],B,C,D])(implicit __pos: SourceContext,__imp0: Reppable[B,A],__imp1: Reppable[C,A],__imp2: Reppable[D,A]): Rep[DenseVector[A]] = { DenseVector[A](t._1,__imp0.view(t._2),__imp1.view(t._3),__imp2.view(t._4)) }
  implicit def varTupleToDense4[A:Manifest,B,C,D](t: Tuple4[Var[A],B,C,D])(implicit __pos: SourceContext,__imp0: Reppable[B,A],__imp1: Reppable[C,A],__imp2: Reppable[D,A]): Rep[DenseVector[A]] = { DenseVector[A](readVar(t._1),__imp0.view(t._2),__imp1.view(t._3),__imp2.view(t._4)) }
  implicit def tupleToDense5[A:Manifest,B,C,D,E](t: Tuple5[A,B,C,D,E])(implicit __pos: SourceContext,__imp0: Reppable[B,A],__imp1: Reppable[C,A],__imp2: Reppable[D,A],__imp3: Reppable[E,A]): Rep[DenseVector[A]] = { DenseVector[A](unit(t._1),__imp0.view(t._2),__imp1.view(t._3),__imp2.view(t._4),__imp3.view(t._5)) }
  implicit def repTupleToDense5[A:Manifest,B,C,D,E](t: Tuple5[Rep[A],B,C,D,E])(implicit __pos: SourceContext,__imp0: Reppable[B,A],__imp1: Reppable[C,A],__imp2: Reppable[D,A],__imp3: Reppable[E,A]): Rep[DenseVector[A]] = { DenseVector[A](t._1,__imp0.view(t._2),__imp1.view(t._3),__imp2.view(t._4),__imp3.view(t._5)) }
  implicit def varTupleToDense5[A:Manifest,B,C,D,E](t: Tuple5[Var[A],B,C,D,E])(implicit __pos: SourceContext,__imp0: Reppable[B,A],__imp1: Reppable[C,A],__imp2: Reppable[D,A],__imp3: Reppable[E,A]): Rep[DenseVector[A]] = { DenseVector[A](readVar(t._1),__imp0.view(t._2),__imp1.view(t._3),__imp2.view(t._4),__imp3.view(t._5)) }
  implicit def tupleToDense6[A:Manifest,B,C,D,E,F](t: Tuple6[A,B,C,D,E,F])(implicit __pos: SourceContext,__imp0: Reppable[B,A],__imp1: Reppable[C,A],__imp2: Reppable[D,A],__imp3: Reppable[E,A],__imp4: Reppable[F,A]): Rep[DenseVector[A]] = { DenseVector[A](unit(t._1),__imp0.view(t._2),__imp1.view(t._3),__imp2.view(t._4),__imp3.view(t._5),__imp4.view(t._6)) }
  implicit def repTupleToDense6[A:Manifest,B,C,D,E,F](t: Tuple6[Rep[A],B,C,D,E,F])(implicit __pos: SourceContext,__imp0: Reppable[B,A],__imp1: Reppable[C,A],__imp2: Reppable[D,A],__imp3: Reppable[E,A],__imp4: Reppable[F,A]): Rep[DenseVector[A]] = { DenseVector[A](t._1,__imp0.view(t._2),__imp1.view(t._3),__imp2.view(t._4),__imp3.view(t._5),__imp4.view(t._6)) }
  implicit def varTupleToDense6[A:Manifest,B,C,D,E,F](t: Tuple6[Var[A],B,C,D,E,F])(implicit __pos: SourceContext,__imp0: Reppable[B,A],__imp1: Reppable[C,A],__imp2: Reppable[D,A],__imp3: Reppable[E,A],__imp4: Reppable[F,A]): Rep[DenseVector[A]] = { DenseVector[A](readVar(t._1),__imp0.view(t._2),__imp1.view(t._3),__imp2.view(t._4),__imp3.view(t._5),__imp4.view(t._6)) }
  implicit def tupleToDense7[A:Manifest,B,C,D,E,F,G](t: Tuple7[A,B,C,D,E,F,G])(implicit __pos: SourceContext,__imp0: Reppable[B,A],__imp1: Reppable[C,A],__imp2: Reppable[D,A],__imp3: Reppable[E,A],__imp4: Reppable[F,A],__imp5: Reppable[G,A]): Rep[DenseVector[A]] = { DenseVector[A](unit(t._1),__imp0.view(t._2),__imp1.view(t._3),__imp2.view(t._4),__imp3.view(t._5),__imp4.view(t._6),__imp5.view(t._7)) }
  implicit def repTupleToDense7[A:Manifest,B,C,D,E,F,G](t: Tuple7[Rep[A],B,C,D,E,F,G])(implicit __pos: SourceContext,__imp0: Reppable[B,A],__imp1: Reppable[C,A],__imp2: Reppable[D,A],__imp3: Reppable[E,A],__imp4: Reppable[F,A],__imp5: Reppable[G,A]): Rep[DenseVector[A]] = { DenseVector[A](t._1,__imp0.view(t._2),__imp1.view(t._3),__imp2.view(t._4),__imp3.view(t._5),__imp4.view(t._6),__imp5.view(t._7)) }
  implicit def varTupleToDense7[A:Manifest,B,C,D,E,F,G](t: Tuple7[Var[A],B,C,D,E,F,G])(implicit __pos: SourceContext,__imp0: Reppable[B,A],__imp1: Reppable[C,A],__imp2: Reppable[D,A],__imp3: Reppable[E,A],__imp4: Reppable[F,A],__imp5: Reppable[G,A]): Rep[DenseVector[A]] = { DenseVector[A](readVar(t._1),__imp0.view(t._2),__imp1.view(t._3),__imp2.view(t._4),__imp3.view(t._5),__imp4.view(t._6),__imp5.view(t._7)) }
  implicit def tupleToDense8[A:Manifest,B,C,D,E,F,G,H](t: Tuple8[A,B,C,D,E,F,G,H])(implicit __pos: SourceContext,__imp0: Reppable[B,A],__imp1: Reppable[C,A],__imp2: Reppable[D,A],__imp3: Reppable[E,A],__imp4: Reppable[F,A],__imp5: Reppable[G,A],__imp6: Reppable[H,A]): Rep[DenseVector[A]] = { DenseVector[A](unit(t._1),__imp0.view(t._2),__imp1.view(t._3),__imp2.view(t._4),__imp3.view(t._5),__imp4.view(t._6),__imp5.view(t._7),__imp6.view(t._8)) }
  implicit def repTupleToDense8[A:Manifest,B,C,D,E,F,G,H](t: Tuple8[Rep[A],B,C,D,E,F,G,H])(implicit __pos: SourceContext,__imp0: Reppable[B,A],__imp1: Reppable[C,A],__imp2: Reppable[D,A],__imp3: Reppable[E,A],__imp4: Reppable[F,A],__imp5: Reppable[G,A],__imp6: Reppable[H,A]): Rep[DenseVector[A]] = { DenseVector[A](t._1,__imp0.view(t._2),__imp1.view(t._3),__imp2.view(t._4),__imp3.view(t._5),__imp4.view(t._6),__imp5.view(t._7),__imp6.view(t._8)) }
  implicit def varTupleToDense8[A:Manifest,B,C,D,E,F,G,H](t: Tuple8[Var[A],B,C,D,E,F,G,H])(implicit __pos: SourceContext,__imp0: Reppable[B,A],__imp1: Reppable[C,A],__imp2: Reppable[D,A],__imp3: Reppable[E,A],__imp4: Reppable[F,A],__imp5: Reppable[G,A],__imp6: Reppable[H,A]): Rep[DenseVector[A]] = { DenseVector[A](readVar(t._1),__imp0.view(t._2),__imp1.view(t._3),__imp2.view(t._4),__imp3.view(t._5),__imp4.view(t._6),__imp5.view(t._7),__imp6.view(t._8)) }
  implicit def tupleToDense9[A:Manifest,B,C,D,E,F,G,H,I](t: Tuple9[A,B,C,D,E,F,G,H,I])(implicit __pos: SourceContext,__imp0: Reppable[B,A],__imp1: Reppable[C,A],__imp2: Reppable[D,A],__imp3: Reppable[E,A],__imp4: Reppable[F,A],__imp5: Reppable[G,A],__imp6: Reppable[H,A],__imp7: Reppable[I,A]): Rep[DenseVector[A]] = { DenseVector[A](unit(t._1),__imp0.view(t._2),__imp1.view(t._3),__imp2.view(t._4),__imp3.view(t._5),__imp4.view(t._6),__imp5.view(t._7),__imp6.view(t._8),__imp7.view(t._9)) }
  implicit def repTupleToDense9[A:Manifest,B,C,D,E,F,G,H,I](t: Tuple9[Rep[A],B,C,D,E,F,G,H,I])(implicit __pos: SourceContext,__imp0: Reppable[B,A],__imp1: Reppable[C,A],__imp2: Reppable[D,A],__imp3: Reppable[E,A],__imp4: Reppable[F,A],__imp5: Reppable[G,A],__imp6: Reppable[H,A],__imp7: Reppable[I,A]): Rep[DenseVector[A]] = { DenseVector[A](t._1,__imp0.view(t._2),__imp1.view(t._3),__imp2.view(t._4),__imp3.view(t._5),__imp4.view(t._6),__imp5.view(t._7),__imp6.view(t._8),__imp7.view(t._9)) }
  implicit def varTupleToDense9[A:Manifest,B,C,D,E,F,G,H,I](t: Tuple9[Var[A],B,C,D,E,F,G,H,I])(implicit __pos: SourceContext,__imp0: Reppable[B,A],__imp1: Reppable[C,A],__imp2: Reppable[D,A],__imp3: Reppable[E,A],__imp4: Reppable[F,A],__imp5: Reppable[G,A],__imp6: Reppable[H,A],__imp7: Reppable[I,A]): Rep[DenseVector[A]] = { DenseVector[A](readVar(t._1),__imp0.view(t._2),__imp1.view(t._3),__imp2.view(t._4),__imp3.view(t._5),__imp4.view(t._6),__imp5.view(t._7),__imp6.view(t._8),__imp7.view(t._9)) }
  implicit def tupleToDense10[A:Manifest,B,C,D,E,F,G,H,I,J](t: Tuple10[A,B,C,D,E,F,G,H,I,J])(implicit __pos: SourceContext,__imp0: Reppable[B,A],__imp1: Reppable[C,A],__imp2: Reppable[D,A],__imp3: Reppable[E,A],__imp4: Reppable[F,A],__imp5: Reppable[G,A],__imp6: Reppable[H,A],__imp7: Reppable[I,A],__imp8: Reppable[J,A]): Rep[DenseVector[A]] = { DenseVector[A](unit(t._1),__imp0.view(t._2),__imp1.view(t._3),__imp2.view(t._4),__imp3.view(t._5),__imp4.view(t._6),__imp5.view(t._7),__imp6.view(t._8),__imp7.view(t._9),__imp8.view(t._10)) }
  implicit def repTupleToDense10[A:Manifest,B,C,D,E,F,G,H,I,J](t: Tuple10[Rep[A],B,C,D,E,F,G,H,I,J])(implicit __pos: SourceContext,__imp0: Reppable[B,A],__imp1: Reppable[C,A],__imp2: Reppable[D,A],__imp3: Reppable[E,A],__imp4: Reppable[F,A],__imp5: Reppable[G,A],__imp6: Reppable[H,A],__imp7: Reppable[I,A],__imp8: Reppable[J,A]): Rep[DenseVector[A]] = { DenseVector[A](t._1,__imp0.view(t._2),__imp1.view(t._3),__imp2.view(t._4),__imp3.view(t._5),__imp4.view(t._6),__imp5.view(t._7),__imp6.view(t._8),__imp7.view(t._9),__imp8.view(t._10)) }
  implicit def varTupleToDense10[A:Manifest,B,C,D,E,F,G,H,I,J](t: Tuple10[Var[A],B,C,D,E,F,G,H,I,J])(implicit __pos: SourceContext,__imp0: Reppable[B,A],__imp1: Reppable[C,A],__imp2: Reppable[D,A],__imp3: Reppable[E,A],__imp4: Reppable[F,A],__imp5: Reppable[G,A],__imp6: Reppable[H,A],__imp7: Reppable[I,A],__imp8: Reppable[J,A]): Rep[DenseVector[A]] = { DenseVector[A](readVar(t._1),__imp0.view(t._2),__imp1.view(t._3),__imp2.view(t._4),__imp3.view(t._5),__imp4.view(t._6),__imp5.view(t._7),__imp6.view(t._8),__imp7.view(t._9),__imp8.view(t._10)) }
  implicit def tupleToDense11[A:Manifest,B,C,D,E,F,G,H,I,J,K](t: Tuple11[A,B,C,D,E,F,G,H,I,J,K])(implicit __pos: SourceContext,__imp0: Reppable[B,A],__imp1: Reppable[C,A],__imp2: Reppable[D,A],__imp3: Reppable[E,A],__imp4: Reppable[F,A],__imp5: Reppable[G,A],__imp6: Reppable[H,A],__imp7: Reppable[I,A],__imp8: Reppable[J,A],__imp9: Reppable[K,A]): Rep[DenseVector[A]] = { DenseVector[A](unit(t._1),__imp0.view(t._2),__imp1.view(t._3),__imp2.view(t._4),__imp3.view(t._5),__imp4.view(t._6),__imp5.view(t._7),__imp6.view(t._8),__imp7.view(t._9),__imp8.view(t._10),__imp9.view(t._11)) }
  implicit def repTupleToDense11[A:Manifest,B,C,D,E,F,G,H,I,J,K](t: Tuple11[Rep[A],B,C,D,E,F,G,H,I,J,K])(implicit __pos: SourceContext,__imp0: Reppable[B,A],__imp1: Reppable[C,A],__imp2: Reppable[D,A],__imp3: Reppable[E,A],__imp4: Reppable[F,A],__imp5: Reppable[G,A],__imp6: Reppable[H,A],__imp7: Reppable[I,A],__imp8: Reppable[J,A],__imp9: Reppable[K,A]): Rep[DenseVector[A]] = { DenseVector[A](t._1,__imp0.view(t._2),__imp1.view(t._3),__imp2.view(t._4),__imp3.view(t._5),__imp4.view(t._6),__imp5.view(t._7),__imp6.view(t._8),__imp7.view(t._9),__imp8.view(t._10),__imp9.view(t._11)) }
  implicit def varTupleToDense11[A:Manifest,B,C,D,E,F,G,H,I,J,K](t: Tuple11[Var[A],B,C,D,E,F,G,H,I,J,K])(implicit __pos: SourceContext,__imp0: Reppable[B,A],__imp1: Reppable[C,A],__imp2: Reppable[D,A],__imp3: Reppable[E,A],__imp4: Reppable[F,A],__imp5: Reppable[G,A],__imp6: Reppable[H,A],__imp7: Reppable[I,A],__imp8: Reppable[J,A],__imp9: Reppable[K,A]): Rep[DenseVector[A]] = { DenseVector[A](readVar(t._1),__imp0.view(t._2),__imp1.view(t._3),__imp2.view(t._4),__imp3.view(t._5),__imp4.view(t._6),__imp5.view(t._7),__imp6.view(t._8),__imp7.view(t._9),__imp8.view(t._10),__imp9.view(t._11)) }
  implicit def tupleToDense12[A:Manifest,B,C,D,E,F,G,H,I,J,K,L](t: Tuple12[A,B,C,D,E,F,G,H,I,J,K,L])(implicit __pos: SourceContext,__imp0: Reppable[B,A],__imp1: Reppable[C,A],__imp2: Reppable[D,A],__imp3: Reppable[E,A],__imp4: Reppable[F,A],__imp5: Reppable[G,A],__imp6: Reppable[H,A],__imp7: Reppable[I,A],__imp8: Reppable[J,A],__imp9: Reppable[K,A],__imp10: Reppable[L,A]): Rep[DenseVector[A]] = { DenseVector[A](unit(t._1),__imp0.view(t._2),__imp1.view(t._3),__imp2.view(t._4),__imp3.view(t._5),__imp4.view(t._6),__imp5.view(t._7),__imp6.view(t._8),__imp7.view(t._9),__imp8.view(t._10),__imp9.view(t._11),__imp10.view(t._12)) }
  implicit def repTupleToDense12[A:Manifest,B,C,D,E,F,G,H,I,J,K,L](t: Tuple12[Rep[A],B,C,D,E,F,G,H,I,J,K,L])(implicit __pos: SourceContext,__imp0: Reppable[B,A],__imp1: Reppable[C,A],__imp2: Reppable[D,A],__imp3: Reppable[E,A],__imp4: Reppable[F,A],__imp5: Reppable[G,A],__imp6: Reppable[H,A],__imp7: Reppable[I,A],__imp8: Reppable[J,A],__imp9: Reppable[K,A],__imp10: Reppable[L,A]): Rep[DenseVector[A]] = { DenseVector[A](t._1,__imp0.view(t._2),__imp1.view(t._3),__imp2.view(t._4),__imp3.view(t._5),__imp4.view(t._6),__imp5.view(t._7),__imp6.view(t._8),__imp7.view(t._9),__imp8.view(t._10),__imp9.view(t._11),__imp10.view(t._12)) }
  implicit def varTupleToDense12[A:Manifest,B,C,D,E,F,G,H,I,J,K,L](t: Tuple12[Var[A],B,C,D,E,F,G,H,I,J,K,L])(implicit __pos: SourceContext,__imp0: Reppable[B,A],__imp1: Reppable[C,A],__imp2: Reppable[D,A],__imp3: Reppable[E,A],__imp4: Reppable[F,A],__imp5: Reppable[G,A],__imp6: Reppable[H,A],__imp7: Reppable[I,A],__imp8: Reppable[J,A],__imp9: Reppable[K,A],__imp10: Reppable[L,A]): Rep[DenseVector[A]] = { DenseVector[A](readVar(t._1),__imp0.view(t._2),__imp1.view(t._3),__imp2.view(t._4),__imp3.view(t._5),__imp4.view(t._6),__imp5.view(t._7),__imp6.view(t._8),__imp7.view(t._9),__imp8.view(t._10),__imp9.view(t._11),__imp10.view(t._12)) }
  implicit def tupleToDense13[A:Manifest,B,C,D,E,F,G,H,I,J,K,L,M](t: Tuple13[A,B,C,D,E,F,G,H,I,J,K,L,M])(implicit __pos: SourceContext,__imp0: Reppable[B,A],__imp1: Reppable[C,A],__imp2: Reppable[D,A],__imp3: Reppable[E,A],__imp4: Reppable[F,A],__imp5: Reppable[G,A],__imp6: Reppable[H,A],__imp7: Reppable[I,A],__imp8: Reppable[J,A],__imp9: Reppable[K,A],__imp10: Reppable[L,A],__imp11: Reppable[M,A]): Rep[DenseVector[A]] = { DenseVector[A](unit(t._1),__imp0.view(t._2),__imp1.view(t._3),__imp2.view(t._4),__imp3.view(t._5),__imp4.view(t._6),__imp5.view(t._7),__imp6.view(t._8),__imp7.view(t._9),__imp8.view(t._10),__imp9.view(t._11),__imp10.view(t._12),__imp11.view(t._13)) }
  implicit def repTupleToDense13[A:Manifest,B,C,D,E,F,G,H,I,J,K,L,M](t: Tuple13[Rep[A],B,C,D,E,F,G,H,I,J,K,L,M])(implicit __pos: SourceContext,__imp0: Reppable[B,A],__imp1: Reppable[C,A],__imp2: Reppable[D,A],__imp3: Reppable[E,A],__imp4: Reppable[F,A],__imp5: Reppable[G,A],__imp6: Reppable[H,A],__imp7: Reppable[I,A],__imp8: Reppable[J,A],__imp9: Reppable[K,A],__imp10: Reppable[L,A],__imp11: Reppable[M,A]): Rep[DenseVector[A]] = { DenseVector[A](t._1,__imp0.view(t._2),__imp1.view(t._3),__imp2.view(t._4),__imp3.view(t._5),__imp4.view(t._6),__imp5.view(t._7),__imp6.view(t._8),__imp7.view(t._9),__imp8.view(t._10),__imp9.view(t._11),__imp10.view(t._12),__imp11.view(t._13)) }
  implicit def varTupleToDense13[A:Manifest,B,C,D,E,F,G,H,I,J,K,L,M](t: Tuple13[Var[A],B,C,D,E,F,G,H,I,J,K,L,M])(implicit __pos: SourceContext,__imp0: Reppable[B,A],__imp1: Reppable[C,A],__imp2: Reppable[D,A],__imp3: Reppable[E,A],__imp4: Reppable[F,A],__imp5: Reppable[G,A],__imp6: Reppable[H,A],__imp7: Reppable[I,A],__imp8: Reppable[J,A],__imp9: Reppable[K,A],__imp10: Reppable[L,A],__imp11: Reppable[M,A]): Rep[DenseVector[A]] = { DenseVector[A](readVar(t._1),__imp0.view(t._2),__imp1.view(t._3),__imp2.view(t._4),__imp3.view(t._5),__imp4.view(t._6),__imp5.view(t._7),__imp6.view(t._8),__imp7.view(t._9),__imp8.view(t._10),__imp9.view(t._11),__imp10.view(t._12),__imp11.view(t._13)) }
  implicit def tupleToDense14[A:Manifest,B,C,D,E,F,G,H,I,J,K,L,M,N](t: Tuple14[A,B,C,D,E,F,G,H,I,J,K,L,M,N])(implicit __pos: SourceContext,__imp0: Reppable[B,A],__imp1: Reppable[C,A],__imp2: Reppable[D,A],__imp3: Reppable[E,A],__imp4: Reppable[F,A],__imp5: Reppable[G,A],__imp6: Reppable[H,A],__imp7: Reppable[I,A],__imp8: Reppable[J,A],__imp9: Reppable[K,A],__imp10: Reppable[L,A],__imp11: Reppable[M,A],__imp12: Reppable[N,A]): Rep[DenseVector[A]] = { DenseVector[A](unit(t._1),__imp0.view(t._2),__imp1.view(t._3),__imp2.view(t._4),__imp3.view(t._5),__imp4.view(t._6),__imp5.view(t._7),__imp6.view(t._8),__imp7.view(t._9),__imp8.view(t._10),__imp9.view(t._11),__imp10.view(t._12),__imp11.view(t._13),__imp12.view(t._14)) }
  implicit def repTupleToDense14[A:Manifest,B,C,D,E,F,G,H,I,J,K,L,M,N](t: Tuple14[Rep[A],B,C,D,E,F,G,H,I,J,K,L,M,N])(implicit __pos: SourceContext,__imp0: Reppable[B,A],__imp1: Reppable[C,A],__imp2: Reppable[D,A],__imp3: Reppable[E,A],__imp4: Reppable[F,A],__imp5: Reppable[G,A],__imp6: Reppable[H,A],__imp7: Reppable[I,A],__imp8: Reppable[J,A],__imp9: Reppable[K,A],__imp10: Reppable[L,A],__imp11: Reppable[M,A],__imp12: Reppable[N,A]): Rep[DenseVector[A]] = { DenseVector[A](t._1,__imp0.view(t._2),__imp1.view(t._3),__imp2.view(t._4),__imp3.view(t._5),__imp4.view(t._6),__imp5.view(t._7),__imp6.view(t._8),__imp7.view(t._9),__imp8.view(t._10),__imp9.view(t._11),__imp10.view(t._12),__imp11.view(t._13),__imp12.view(t._14)) }
  implicit def varTupleToDense14[A:Manifest,B,C,D,E,F,G,H,I,J,K,L,M,N](t: Tuple14[Var[A],B,C,D,E,F,G,H,I,J,K,L,M,N])(implicit __pos: SourceContext,__imp0: Reppable[B,A],__imp1: Reppable[C,A],__imp2: Reppable[D,A],__imp3: Reppable[E,A],__imp4: Reppable[F,A],__imp5: Reppable[G,A],__imp6: Reppable[H,A],__imp7: Reppable[I,A],__imp8: Reppable[J,A],__imp9: Reppable[K,A],__imp10: Reppable[L,A],__imp11: Reppable[M,A],__imp12: Reppable[N,A]): Rep[DenseVector[A]] = { DenseVector[A](readVar(t._1),__imp0.view(t._2),__imp1.view(t._3),__imp2.view(t._4),__imp3.view(t._5),__imp4.view(t._6),__imp5.view(t._7),__imp6.view(t._8),__imp7.view(t._9),__imp8.view(t._10),__imp9.view(t._11),__imp10.view(t._12),__imp11.view(t._13),__imp12.view(t._14)) }
  implicit def tupleToDense15[A:Manifest,B,C,D,E,F,G,H,I,J,K,L,M,N,O](t: Tuple15[A,B,C,D,E,F,G,H,I,J,K,L,M,N,O])(implicit __pos: SourceContext,__imp0: Reppable[B,A],__imp1: Reppable[C,A],__imp2: Reppable[D,A],__imp3: Reppable[E,A],__imp4: Reppable[F,A],__imp5: Reppable[G,A],__imp6: Reppable[H,A],__imp7: Reppable[I,A],__imp8: Reppable[J,A],__imp9: Reppable[K,A],__imp10: Reppable[L,A],__imp11: Reppable[M,A],__imp12: Reppable[N,A],__imp13: Reppable[O,A]): Rep[DenseVector[A]] = { DenseVector[A](unit(t._1),__imp0.view(t._2),__imp1.view(t._3),__imp2.view(t._4),__imp3.view(t._5),__imp4.view(t._6),__imp5.view(t._7),__imp6.view(t._8),__imp7.view(t._9),__imp8.view(t._10),__imp9.view(t._11),__imp10.view(t._12),__imp11.view(t._13),__imp12.view(t._14),__imp13.view(t._15)) }
  implicit def repTupleToDense15[A:Manifest,B,C,D,E,F,G,H,I,J,K,L,M,N,O](t: Tuple15[Rep[A],B,C,D,E,F,G,H,I,J,K,L,M,N,O])(implicit __pos: SourceContext,__imp0: Reppable[B,A],__imp1: Reppable[C,A],__imp2: Reppable[D,A],__imp3: Reppable[E,A],__imp4: Reppable[F,A],__imp5: Reppable[G,A],__imp6: Reppable[H,A],__imp7: Reppable[I,A],__imp8: Reppable[J,A],__imp9: Reppable[K,A],__imp10: Reppable[L,A],__imp11: Reppable[M,A],__imp12: Reppable[N,A],__imp13: Reppable[O,A]): Rep[DenseVector[A]] = { DenseVector[A](t._1,__imp0.view(t._2),__imp1.view(t._3),__imp2.view(t._4),__imp3.view(t._5),__imp4.view(t._6),__imp5.view(t._7),__imp6.view(t._8),__imp7.view(t._9),__imp8.view(t._10),__imp9.view(t._11),__imp10.view(t._12),__imp11.view(t._13),__imp12.view(t._14),__imp13.view(t._15)) }
  implicit def varTupleToDense15[A:Manifest,B,C,D,E,F,G,H,I,J,K,L,M,N,O](t: Tuple15[Var[A],B,C,D,E,F,G,H,I,J,K,L,M,N,O])(implicit __pos: SourceContext,__imp0: Reppable[B,A],__imp1: Reppable[C,A],__imp2: Reppable[D,A],__imp3: Reppable[E,A],__imp4: Reppable[F,A],__imp5: Reppable[G,A],__imp6: Reppable[H,A],__imp7: Reppable[I,A],__imp8: Reppable[J,A],__imp9: Reppable[K,A],__imp10: Reppable[L,A],__imp11: Reppable[M,A],__imp12: Reppable[N,A],__imp13: Reppable[O,A]): Rep[DenseVector[A]] = { DenseVector[A](readVar(t._1),__imp0.view(t._2),__imp1.view(t._3),__imp2.view(t._4),__imp3.view(t._5),__imp4.view(t._6),__imp5.view(t._7),__imp6.view(t._8),__imp7.view(t._9),__imp8.view(t._10),__imp9.view(t._11),__imp10.view(t._12),__imp11.view(t._13),__imp12.view(t._14),__imp13.view(t._15)) }
  implicit def tupleToDense16[A:Manifest,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P](t: Tuple16[A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P])(implicit __pos: SourceContext,__imp0: Reppable[B,A],__imp1: Reppable[C,A],__imp2: Reppable[D,A],__imp3: Reppable[E,A],__imp4: Reppable[F,A],__imp5: Reppable[G,A],__imp6: Reppable[H,A],__imp7: Reppable[I,A],__imp8: Reppable[J,A],__imp9: Reppable[K,A],__imp10: Reppable[L,A],__imp11: Reppable[M,A],__imp12: Reppable[N,A],__imp13: Reppable[O,A],__imp14: Reppable[P,A]): Rep[DenseVector[A]] = { DenseVector[A](unit(t._1),__imp0.view(t._2),__imp1.view(t._3),__imp2.view(t._4),__imp3.view(t._5),__imp4.view(t._6),__imp5.view(t._7),__imp6.view(t._8),__imp7.view(t._9),__imp8.view(t._10),__imp9.view(t._11),__imp10.view(t._12),__imp11.view(t._13),__imp12.view(t._14),__imp13.view(t._15),__imp14.view(t._16)) }
  implicit def repTupleToDense16[A:Manifest,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P](t: Tuple16[Rep[A],B,C,D,E,F,G,H,I,J,K,L,M,N,O,P])(implicit __pos: SourceContext,__imp0: Reppable[B,A],__imp1: Reppable[C,A],__imp2: Reppable[D,A],__imp3: Reppable[E,A],__imp4: Reppable[F,A],__imp5: Reppable[G,A],__imp6: Reppable[H,A],__imp7: Reppable[I,A],__imp8: Reppable[J,A],__imp9: Reppable[K,A],__imp10: Reppable[L,A],__imp11: Reppable[M,A],__imp12: Reppable[N,A],__imp13: Reppable[O,A],__imp14: Reppable[P,A]): Rep[DenseVector[A]] = { DenseVector[A](t._1,__imp0.view(t._2),__imp1.view(t._3),__imp2.view(t._4),__imp3.view(t._5),__imp4.view(t._6),__imp5.view(t._7),__imp6.view(t._8),__imp7.view(t._9),__imp8.view(t._10),__imp9.view(t._11),__imp10.view(t._12),__imp11.view(t._13),__imp12.view(t._14),__imp13.view(t._15),__imp14.view(t._16)) }
  implicit def varTupleToDense16[A:Manifest,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P](t: Tuple16[Var[A],B,C,D,E,F,G,H,I,J,K,L,M,N,O,P])(implicit __pos: SourceContext,__imp0: Reppable[B,A],__imp1: Reppable[C,A],__imp2: Reppable[D,A],__imp3: Reppable[E,A],__imp4: Reppable[F,A],__imp5: Reppable[G,A],__imp6: Reppable[H,A],__imp7: Reppable[I,A],__imp8: Reppable[J,A],__imp9: Reppable[K,A],__imp10: Reppable[L,A],__imp11: Reppable[M,A],__imp12: Reppable[N,A],__imp13: Reppable[O,A],__imp14: Reppable[P,A]): Rep[DenseVector[A]] = { DenseVector[A](readVar(t._1),__imp0.view(t._2),__imp1.view(t._3),__imp2.view(t._4),__imp3.view(t._5),__imp4.view(t._6),__imp5.view(t._7),__imp6.view(t._8),__imp7.view(t._9),__imp8.view(t._10),__imp9.view(t._11),__imp10.view(t._12),__imp11.view(t._13),__imp12.view(t._14),__imp13.view(t._15),__imp14.view(t._16)) }
  implicit def tupleToDense17[A:Manifest,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q](t: Tuple17[A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q])(implicit __pos: SourceContext,__imp0: Reppable[B,A],__imp1: Reppable[C,A],__imp2: Reppable[D,A],__imp3: Reppable[E,A],__imp4: Reppable[F,A],__imp5: Reppable[G,A],__imp6: Reppable[H,A],__imp7: Reppable[I,A],__imp8: Reppable[J,A],__imp9: Reppable[K,A],__imp10: Reppable[L,A],__imp11: Reppable[M,A],__imp12: Reppable[N,A],__imp13: Reppable[O,A],__imp14: Reppable[P,A],__imp15: Reppable[Q,A]): Rep[DenseVector[A]] = { DenseVector[A](unit(t._1),__imp0.view(t._2),__imp1.view(t._3),__imp2.view(t._4),__imp3.view(t._5),__imp4.view(t._6),__imp5.view(t._7),__imp6.view(t._8),__imp7.view(t._9),__imp8.view(t._10),__imp9.view(t._11),__imp10.view(t._12),__imp11.view(t._13),__imp12.view(t._14),__imp13.view(t._15),__imp14.view(t._16),__imp15.view(t._17)) }
  implicit def repTupleToDense17[A:Manifest,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q](t: Tuple17[Rep[A],B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q])(implicit __pos: SourceContext,__imp0: Reppable[B,A],__imp1: Reppable[C,A],__imp2: Reppable[D,A],__imp3: Reppable[E,A],__imp4: Reppable[F,A],__imp5: Reppable[G,A],__imp6: Reppable[H,A],__imp7: Reppable[I,A],__imp8: Reppable[J,A],__imp9: Reppable[K,A],__imp10: Reppable[L,A],__imp11: Reppable[M,A],__imp12: Reppable[N,A],__imp13: Reppable[O,A],__imp14: Reppable[P,A],__imp15: Reppable[Q,A]): Rep[DenseVector[A]] = { DenseVector[A](t._1,__imp0.view(t._2),__imp1.view(t._3),__imp2.view(t._4),__imp3.view(t._5),__imp4.view(t._6),__imp5.view(t._7),__imp6.view(t._8),__imp7.view(t._9),__imp8.view(t._10),__imp9.view(t._11),__imp10.view(t._12),__imp11.view(t._13),__imp12.view(t._14),__imp13.view(t._15),__imp14.view(t._16),__imp15.view(t._17)) }
  implicit def varTupleToDense17[A:Manifest,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q](t: Tuple17[Var[A],B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q])(implicit __pos: SourceContext,__imp0: Reppable[B,A],__imp1: Reppable[C,A],__imp2: Reppable[D,A],__imp3: Reppable[E,A],__imp4: Reppable[F,A],__imp5: Reppable[G,A],__imp6: Reppable[H,A],__imp7: Reppable[I,A],__imp8: Reppable[J,A],__imp9: Reppable[K,A],__imp10: Reppable[L,A],__imp11: Reppable[M,A],__imp12: Reppable[N,A],__imp13: Reppable[O,A],__imp14: Reppable[P,A],__imp15: Reppable[Q,A]): Rep[DenseVector[A]] = { DenseVector[A](readVar(t._1),__imp0.view(t._2),__imp1.view(t._3),__imp2.view(t._4),__imp3.view(t._5),__imp4.view(t._6),__imp5.view(t._7),__imp6.view(t._8),__imp7.view(t._9),__imp8.view(t._10),__imp9.view(t._11),__imp10.view(t._12),__imp11.view(t._13),__imp12.view(t._14),__imp13.view(t._15),__imp14.view(t._16),__imp15.view(t._17)) }
  implicit def tupleToDense18[A:Manifest,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R](t: Tuple18[A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R])(implicit __pos: SourceContext,__imp0: Reppable[B,A],__imp1: Reppable[C,A],__imp2: Reppable[D,A],__imp3: Reppable[E,A],__imp4: Reppable[F,A],__imp5: Reppable[G,A],__imp6: Reppable[H,A],__imp7: Reppable[I,A],__imp8: Reppable[J,A],__imp9: Reppable[K,A],__imp10: Reppable[L,A],__imp11: Reppable[M,A],__imp12: Reppable[N,A],__imp13: Reppable[O,A],__imp14: Reppable[P,A],__imp15: Reppable[Q,A],__imp16: Reppable[R,A]): Rep[DenseVector[A]] = { DenseVector[A](unit(t._1),__imp0.view(t._2),__imp1.view(t._3),__imp2.view(t._4),__imp3.view(t._5),__imp4.view(t._6),__imp5.view(t._7),__imp6.view(t._8),__imp7.view(t._9),__imp8.view(t._10),__imp9.view(t._11),__imp10.view(t._12),__imp11.view(t._13),__imp12.view(t._14),__imp13.view(t._15),__imp14.view(t._16),__imp15.view(t._17),__imp16.view(t._18)) }
  implicit def repTupleToDense18[A:Manifest,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R](t: Tuple18[Rep[A],B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R])(implicit __pos: SourceContext,__imp0: Reppable[B,A],__imp1: Reppable[C,A],__imp2: Reppable[D,A],__imp3: Reppable[E,A],__imp4: Reppable[F,A],__imp5: Reppable[G,A],__imp6: Reppable[H,A],__imp7: Reppable[I,A],__imp8: Reppable[J,A],__imp9: Reppable[K,A],__imp10: Reppable[L,A],__imp11: Reppable[M,A],__imp12: Reppable[N,A],__imp13: Reppable[O,A],__imp14: Reppable[P,A],__imp15: Reppable[Q,A],__imp16: Reppable[R,A]): Rep[DenseVector[A]] = { DenseVector[A](t._1,__imp0.view(t._2),__imp1.view(t._3),__imp2.view(t._4),__imp3.view(t._5),__imp4.view(t._6),__imp5.view(t._7),__imp6.view(t._8),__imp7.view(t._9),__imp8.view(t._10),__imp9.view(t._11),__imp10.view(t._12),__imp11.view(t._13),__imp12.view(t._14),__imp13.view(t._15),__imp14.view(t._16),__imp15.view(t._17),__imp16.view(t._18)) }
  implicit def varTupleToDense18[A:Manifest,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R](t: Tuple18[Var[A],B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R])(implicit __pos: SourceContext,__imp0: Reppable[B,A],__imp1: Reppable[C,A],__imp2: Reppable[D,A],__imp3: Reppable[E,A],__imp4: Reppable[F,A],__imp5: Reppable[G,A],__imp6: Reppable[H,A],__imp7: Reppable[I,A],__imp8: Reppable[J,A],__imp9: Reppable[K,A],__imp10: Reppable[L,A],__imp11: Reppable[M,A],__imp12: Reppable[N,A],__imp13: Reppable[O,A],__imp14: Reppable[P,A],__imp15: Reppable[Q,A],__imp16: Reppable[R,A]): Rep[DenseVector[A]] = { DenseVector[A](readVar(t._1),__imp0.view(t._2),__imp1.view(t._3),__imp2.view(t._4),__imp3.view(t._5),__imp4.view(t._6),__imp5.view(t._7),__imp6.view(t._8),__imp7.view(t._9),__imp8.view(t._10),__imp9.view(t._11),__imp10.view(t._12),__imp11.view(t._13),__imp12.view(t._14),__imp13.view(t._15),__imp14.view(t._16),__imp15.view(t._17),__imp16.view(t._18)) }
  implicit def tupleToDense19[A:Manifest,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S](t: Tuple19[A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S])(implicit __pos: SourceContext,__imp0: Reppable[B,A],__imp1: Reppable[C,A],__imp2: Reppable[D,A],__imp3: Reppable[E,A],__imp4: Reppable[F,A],__imp5: Reppable[G,A],__imp6: Reppable[H,A],__imp7: Reppable[I,A],__imp8: Reppable[J,A],__imp9: Reppable[K,A],__imp10: Reppable[L,A],__imp11: Reppable[M,A],__imp12: Reppable[N,A],__imp13: Reppable[O,A],__imp14: Reppable[P,A],__imp15: Reppable[Q,A],__imp16: Reppable[R,A],__imp17: Reppable[S,A]): Rep[DenseVector[A]] = { DenseVector[A](unit(t._1),__imp0.view(t._2),__imp1.view(t._3),__imp2.view(t._4),__imp3.view(t._5),__imp4.view(t._6),__imp5.view(t._7),__imp6.view(t._8),__imp7.view(t._9),__imp8.view(t._10),__imp9.view(t._11),__imp10.view(t._12),__imp11.view(t._13),__imp12.view(t._14),__imp13.view(t._15),__imp14.view(t._16),__imp15.view(t._17),__imp16.view(t._18),__imp17.view(t._19)) }
  implicit def repTupleToDense19[A:Manifest,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S](t: Tuple19[Rep[A],B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S])(implicit __pos: SourceContext,__imp0: Reppable[B,A],__imp1: Reppable[C,A],__imp2: Reppable[D,A],__imp3: Reppable[E,A],__imp4: Reppable[F,A],__imp5: Reppable[G,A],__imp6: Reppable[H,A],__imp7: Reppable[I,A],__imp8: Reppable[J,A],__imp9: Reppable[K,A],__imp10: Reppable[L,A],__imp11: Reppable[M,A],__imp12: Reppable[N,A],__imp13: Reppable[O,A],__imp14: Reppable[P,A],__imp15: Reppable[Q,A],__imp16: Reppable[R,A],__imp17: Reppable[S,A]): Rep[DenseVector[A]] = { DenseVector[A](t._1,__imp0.view(t._2),__imp1.view(t._3),__imp2.view(t._4),__imp3.view(t._5),__imp4.view(t._6),__imp5.view(t._7),__imp6.view(t._8),__imp7.view(t._9),__imp8.view(t._10),__imp9.view(t._11),__imp10.view(t._12),__imp11.view(t._13),__imp12.view(t._14),__imp13.view(t._15),__imp14.view(t._16),__imp15.view(t._17),__imp16.view(t._18),__imp17.view(t._19)) }
  implicit def varTupleToDense19[A:Manifest,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S](t: Tuple19[Var[A],B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S])(implicit __pos: SourceContext,__imp0: Reppable[B,A],__imp1: Reppable[C,A],__imp2: Reppable[D,A],__imp3: Reppable[E,A],__imp4: Reppable[F,A],__imp5: Reppable[G,A],__imp6: Reppable[H,A],__imp7: Reppable[I,A],__imp8: Reppable[J,A],__imp9: Reppable[K,A],__imp10: Reppable[L,A],__imp11: Reppable[M,A],__imp12: Reppable[N,A],__imp13: Reppable[O,A],__imp14: Reppable[P,A],__imp15: Reppable[Q,A],__imp16: Reppable[R,A],__imp17: Reppable[S,A]): Rep[DenseVector[A]] = { DenseVector[A](readVar(t._1),__imp0.view(t._2),__imp1.view(t._3),__imp2.view(t._4),__imp3.view(t._5),__imp4.view(t._6),__imp5.view(t._7),__imp6.view(t._8),__imp7.view(t._9),__imp8.view(t._10),__imp9.view(t._11),__imp10.view(t._12),__imp11.view(t._13),__imp12.view(t._14),__imp13.view(t._15),__imp14.view(t._16),__imp15.view(t._17),__imp16.view(t._18),__imp17.view(t._19)) }
  implicit def tupleToDense20[A:Manifest,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,T](t: Tuple20[A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,T])(implicit __pos: SourceContext,__imp0: Reppable[B,A],__imp1: Reppable[C,A],__imp2: Reppable[D,A],__imp3: Reppable[E,A],__imp4: Reppable[F,A],__imp5: Reppable[G,A],__imp6: Reppable[H,A],__imp7: Reppable[I,A],__imp8: Reppable[J,A],__imp9: Reppable[K,A],__imp10: Reppable[L,A],__imp11: Reppable[M,A],__imp12: Reppable[N,A],__imp13: Reppable[O,A],__imp14: Reppable[P,A],__imp15: Reppable[Q,A],__imp16: Reppable[R,A],__imp17: Reppable[S,A],__imp18: Reppable[T,A]): Rep[DenseVector[A]] = { DenseVector[A](unit(t._1),__imp0.view(t._2),__imp1.view(t._3),__imp2.view(t._4),__imp3.view(t._5),__imp4.view(t._6),__imp5.view(t._7),__imp6.view(t._8),__imp7.view(t._9),__imp8.view(t._10),__imp9.view(t._11),__imp10.view(t._12),__imp11.view(t._13),__imp12.view(t._14),__imp13.view(t._15),__imp14.view(t._16),__imp15.view(t._17),__imp16.view(t._18),__imp17.view(t._19),__imp18.view(t._20)) }
  implicit def repTupleToDense20[A:Manifest,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,T](t: Tuple20[Rep[A],B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,T])(implicit __pos: SourceContext,__imp0: Reppable[B,A],__imp1: Reppable[C,A],__imp2: Reppable[D,A],__imp3: Reppable[E,A],__imp4: Reppable[F,A],__imp5: Reppable[G,A],__imp6: Reppable[H,A],__imp7: Reppable[I,A],__imp8: Reppable[J,A],__imp9: Reppable[K,A],__imp10: Reppable[L,A],__imp11: Reppable[M,A],__imp12: Reppable[N,A],__imp13: Reppable[O,A],__imp14: Reppable[P,A],__imp15: Reppable[Q,A],__imp16: Reppable[R,A],__imp17: Reppable[S,A],__imp18: Reppable[T,A]): Rep[DenseVector[A]] = { DenseVector[A](t._1,__imp0.view(t._2),__imp1.view(t._3),__imp2.view(t._4),__imp3.view(t._5),__imp4.view(t._6),__imp5.view(t._7),__imp6.view(t._8),__imp7.view(t._9),__imp8.view(t._10),__imp9.view(t._11),__imp10.view(t._12),__imp11.view(t._13),__imp12.view(t._14),__imp13.view(t._15),__imp14.view(t._16),__imp15.view(t._17),__imp16.view(t._18),__imp17.view(t._19),__imp18.view(t._20)) }
  implicit def varTupleToDense20[A:Manifest,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,T](t: Tuple20[Var[A],B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,T])(implicit __pos: SourceContext,__imp0: Reppable[B,A],__imp1: Reppable[C,A],__imp2: Reppable[D,A],__imp3: Reppable[E,A],__imp4: Reppable[F,A],__imp5: Reppable[G,A],__imp6: Reppable[H,A],__imp7: Reppable[I,A],__imp8: Reppable[J,A],__imp9: Reppable[K,A],__imp10: Reppable[L,A],__imp11: Reppable[M,A],__imp12: Reppable[N,A],__imp13: Reppable[O,A],__imp14: Reppable[P,A],__imp15: Reppable[Q,A],__imp16: Reppable[R,A],__imp17: Reppable[S,A],__imp18: Reppable[T,A]): Rep[DenseVector[A]] = { DenseVector[A](readVar(t._1),__imp0.view(t._2),__imp1.view(t._3),__imp2.view(t._4),__imp3.view(t._5),__imp4.view(t._6),__imp5.view(t._7),__imp6.view(t._8),__imp7.view(t._9),__imp8.view(t._10),__imp9.view(t._11),__imp10.view(t._12),__imp11.view(t._13),__imp12.view(t._14),__imp13.view(t._15),__imp14.view(t._16),__imp15.view(t._17),__imp16.view(t._18),__imp17.view(t._19),__imp18.view(t._20)) }
  implicit def tupleToDense21[A:Manifest,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,T,U](t: Tuple21[A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,T,U])(implicit __pos: SourceContext,__imp0: Reppable[B,A],__imp1: Reppable[C,A],__imp2: Reppable[D,A],__imp3: Reppable[E,A],__imp4: Reppable[F,A],__imp5: Reppable[G,A],__imp6: Reppable[H,A],__imp7: Reppable[I,A],__imp8: Reppable[J,A],__imp9: Reppable[K,A],__imp10: Reppable[L,A],__imp11: Reppable[M,A],__imp12: Reppable[N,A],__imp13: Reppable[O,A],__imp14: Reppable[P,A],__imp15: Reppable[Q,A],__imp16: Reppable[R,A],__imp17: Reppable[S,A],__imp18: Reppable[T,A],__imp19: Reppable[U,A]): Rep[DenseVector[A]] = { DenseVector[A](unit(t._1),__imp0.view(t._2),__imp1.view(t._3),__imp2.view(t._4),__imp3.view(t._5),__imp4.view(t._6),__imp5.view(t._7),__imp6.view(t._8),__imp7.view(t._9),__imp8.view(t._10),__imp9.view(t._11),__imp10.view(t._12),__imp11.view(t._13),__imp12.view(t._14),__imp13.view(t._15),__imp14.view(t._16),__imp15.view(t._17),__imp16.view(t._18),__imp17.view(t._19),__imp18.view(t._20),__imp19.view(t._21)) }
  implicit def repTupleToDense21[A:Manifest,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,T,U](t: Tuple21[Rep[A],B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,T,U])(implicit __pos: SourceContext,__imp0: Reppable[B,A],__imp1: Reppable[C,A],__imp2: Reppable[D,A],__imp3: Reppable[E,A],__imp4: Reppable[F,A],__imp5: Reppable[G,A],__imp6: Reppable[H,A],__imp7: Reppable[I,A],__imp8: Reppable[J,A],__imp9: Reppable[K,A],__imp10: Reppable[L,A],__imp11: Reppable[M,A],__imp12: Reppable[N,A],__imp13: Reppable[O,A],__imp14: Reppable[P,A],__imp15: Reppable[Q,A],__imp16: Reppable[R,A],__imp17: Reppable[S,A],__imp18: Reppable[T,A],__imp19: Reppable[U,A]): Rep[DenseVector[A]] = { DenseVector[A](t._1,__imp0.view(t._2),__imp1.view(t._3),__imp2.view(t._4),__imp3.view(t._5),__imp4.view(t._6),__imp5.view(t._7),__imp6.view(t._8),__imp7.view(t._9),__imp8.view(t._10),__imp9.view(t._11),__imp10.view(t._12),__imp11.view(t._13),__imp12.view(t._14),__imp13.view(t._15),__imp14.view(t._16),__imp15.view(t._17),__imp16.view(t._18),__imp17.view(t._19),__imp18.view(t._20),__imp19.view(t._21)) }
  implicit def varTupleToDense21[A:Manifest,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,T,U](t: Tuple21[Var[A],B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,T,U])(implicit __pos: SourceContext,__imp0: Reppable[B,A],__imp1: Reppable[C,A],__imp2: Reppable[D,A],__imp3: Reppable[E,A],__imp4: Reppable[F,A],__imp5: Reppable[G,A],__imp6: Reppable[H,A],__imp7: Reppable[I,A],__imp8: Reppable[J,A],__imp9: Reppable[K,A],__imp10: Reppable[L,A],__imp11: Reppable[M,A],__imp12: Reppable[N,A],__imp13: Reppable[O,A],__imp14: Reppable[P,A],__imp15: Reppable[Q,A],__imp16: Reppable[R,A],__imp17: Reppable[S,A],__imp18: Reppable[T,A],__imp19: Reppable[U,A]): Rep[DenseVector[A]] = { DenseVector[A](readVar(t._1),__imp0.view(t._2),__imp1.view(t._3),__imp2.view(t._4),__imp3.view(t._5),__imp4.view(t._6),__imp5.view(t._7),__imp6.view(t._8),__imp7.view(t._9),__imp8.view(t._10),__imp9.view(t._11),__imp10.view(t._12),__imp11.view(t._13),__imp12.view(t._14),__imp13.view(t._15),__imp14.view(t._16),__imp15.view(t._17),__imp16.view(t._18),__imp17.view(t._19),__imp18.view(t._20),__imp19.view(t._21)) }
  implicit def tupleToDense22[A:Manifest,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,T,U,V](t: Tuple22[A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,T,U,V])(implicit __pos: SourceContext,__imp0: Reppable[B,A],__imp1: Reppable[C,A],__imp2: Reppable[D,A],__imp3: Reppable[E,A],__imp4: Reppable[F,A],__imp5: Reppable[G,A],__imp6: Reppable[H,A],__imp7: Reppable[I,A],__imp8: Reppable[J,A],__imp9: Reppable[K,A],__imp10: Reppable[L,A],__imp11: Reppable[M,A],__imp12: Reppable[N,A],__imp13: Reppable[O,A],__imp14: Reppable[P,A],__imp15: Reppable[Q,A],__imp16: Reppable[R,A],__imp17: Reppable[S,A],__imp18: Reppable[T,A],__imp19: Reppable[U,A],__imp20: Reppable[V,A]): Rep[DenseVector[A]] = { DenseVector[A](unit(t._1),__imp0.view(t._2),__imp1.view(t._3),__imp2.view(t._4),__imp3.view(t._5),__imp4.view(t._6),__imp5.view(t._7),__imp6.view(t._8),__imp7.view(t._9),__imp8.view(t._10),__imp9.view(t._11),__imp10.view(t._12),__imp11.view(t._13),__imp12.view(t._14),__imp13.view(t._15),__imp14.view(t._16),__imp15.view(t._17),__imp16.view(t._18),__imp17.view(t._19),__imp18.view(t._20),__imp19.view(t._21),__imp20.view(t._22)) }
  implicit def repTupleToDense22[A:Manifest,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,T,U,V](t: Tuple22[Rep[A],B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,T,U,V])(implicit __pos: SourceContext,__imp0: Reppable[B,A],__imp1: Reppable[C,A],__imp2: Reppable[D,A],__imp3: Reppable[E,A],__imp4: Reppable[F,A],__imp5: Reppable[G,A],__imp6: Reppable[H,A],__imp7: Reppable[I,A],__imp8: Reppable[J,A],__imp9: Reppable[K,A],__imp10: Reppable[L,A],__imp11: Reppable[M,A],__imp12: Reppable[N,A],__imp13: Reppable[O,A],__imp14: Reppable[P,A],__imp15: Reppable[Q,A],__imp16: Reppable[R,A],__imp17: Reppable[S,A],__imp18: Reppable[T,A],__imp19: Reppable[U,A],__imp20: Reppable[V,A]): Rep[DenseVector[A]] = { DenseVector[A](t._1,__imp0.view(t._2),__imp1.view(t._3),__imp2.view(t._4),__imp3.view(t._5),__imp4.view(t._6),__imp5.view(t._7),__imp6.view(t._8),__imp7.view(t._9),__imp8.view(t._10),__imp9.view(t._11),__imp10.view(t._12),__imp11.view(t._13),__imp12.view(t._14),__imp13.view(t._15),__imp14.view(t._16),__imp15.view(t._17),__imp16.view(t._18),__imp17.view(t._19),__imp18.view(t._20),__imp19.view(t._21),__imp20.view(t._22)) }
  implicit def varTupleToDense22[A:Manifest,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,T,U,V](t: Tuple22[Var[A],B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,T,U,V])(implicit __pos: SourceContext,__imp0: Reppable[B,A],__imp1: Reppable[C,A],__imp2: Reppable[D,A],__imp3: Reppable[E,A],__imp4: Reppable[F,A],__imp5: Reppable[G,A],__imp6: Reppable[H,A],__imp7: Reppable[I,A],__imp8: Reppable[J,A],__imp9: Reppable[K,A],__imp10: Reppable[L,A],__imp11: Reppable[M,A],__imp12: Reppable[N,A],__imp13: Reppable[O,A],__imp14: Reppable[P,A],__imp15: Reppable[Q,A],__imp16: Reppable[R,A],__imp17: Reppable[S,A],__imp18: Reppable[T,A],__imp19: Reppable[U,A],__imp20: Reppable[V,A]): Rep[DenseVector[A]] = { DenseVector[A](readVar(t._1),__imp0.view(t._2),__imp1.view(t._3),__imp2.view(t._4),__imp3.view(t._5),__imp4.view(t._6),__imp5.view(t._7),__imp6.view(t._8),__imp7.view(t._9),__imp8.view(t._10),__imp9.view(t._11),__imp10.view(t._12),__imp11.view(t._13),__imp12.view(t._14),__imp13.view(t._15),__imp14.view(t._16),__imp15.view(t._17),__imp16.view(t._18),__imp17.view(t._19),__imp18.view(t._20),__imp19.view(t._21),__imp20.view(t._22)) }
  implicit def dist(__arg0: Rep[DenseVector[Double]],__arg1: Rep[DenseVector[Double]])(implicit __pos: SourceContext,__imp1: ROverload6): Rep[Double] = { dist(__arg0,__arg1,ABS) }

}

trait DenseVectorOps extends DenseVectorOpsBase {
  this: OptiML => 

  object DenseVector {
    def apply[T:Manifest](__arg0: Rep[Int],__arg1: Rep[Boolean])(implicit __pos: SourceContext,__imp1: Overload24) = densevector_object_apply[T](__arg0,__arg1)(implicitly[Manifest[T]],__pos,overload24)
    def apply[T:Manifest](__arg0: Rep[T]*)(implicit __pos: SourceContext,__imp1: Overload25) = densevector_object_apply[T](__arg0)(implicitly[Manifest[T]],__pos,overload25)
    def zeros(__arg0: Rep[Int])(implicit __pos: SourceContext,__imp1: Overload3) = densevector_object_zeros(__arg0)(__pos)
    def zerosf(__arg0: Rep[Int])(implicit __pos: SourceContext,__imp1: Overload3) = densevector_object_zerosf(__arg0)(__pos)
    def ones(__arg0: Rep[Int])(implicit __pos: SourceContext,__imp1: Overload2) = densevector_object_ones(__arg0)(__pos)
    def onesf(__arg0: Rep[Int])(implicit __pos: SourceContext,__imp1: Overload2) = densevector_object_onesf(__arg0)(__pos)
    def rand(__arg0: Rep[Int])(implicit __pos: SourceContext,__imp1: Overload3) = densevector_object_rand(__arg0)(__pos)
    def randf(__arg0: Rep[Int])(implicit __pos: SourceContext,__imp1: Overload3) = densevector_object_randf(__arg0)(__pos)
    def uniform(start: Rep[Int],step_size: Rep[Double],end: Rep[Int],isRow: Rep[Boolean] = unit(true))(implicit __pos: SourceContext) = densevector_object_uniform(start,step_size,end,isRow)(__pos)
    def flatten[T:Manifest](pieces: Rep[DenseVector[DenseVector[T]]])(implicit __pos: SourceContext) = densevector_object_flatten[T](pieces)(implicitly[Manifest[T]],__pos)
  }

  def __equal[T:Manifest](self: Rep[DenseVector[T]],__arg1: Rep[DenseVector[T]])(implicit __pos: SourceContext,__imp1: Overload12) = densevector___equal[T](self,__arg1)(implicitly[Manifest[T]],__pos,overload12)
  def __equal[T:Manifest](self: Rep[DenseVector[T]],__arg1: Rep[DenseVectorView[T]])(implicit __pos: SourceContext,__imp1: Overload13) = densevector___equal[T](self,__arg1)(implicitly[Manifest[T]],__pos,overload13)
  def __equal[T:Manifest](self: Rep[DenseVector[T]],__arg1: Rep[IndexVector])(implicit __pos: SourceContext,__imp1: Overload14) = densevector___equal[T](self,__arg1)(implicitly[Manifest[T]],__pos,overload14)
  def __equal[T:Manifest](self: Rep[DenseVector[T]],__arg1: Rep[SparseVector[T]])(implicit __pos: SourceContext,__imp1: Overload15) = densevector___equal[T](self,__arg1)(implicitly[Manifest[T]],__pos,overload15)
  def dist(__arg0: Rep[DenseVector[Double]],__arg1: Rep[DenseVector[Double]],__arg2: DistanceMetric)(implicit __pos: SourceContext,__imp1: Overload4) = densevector_dist(__arg0,__arg1,__arg2)(__pos)

  implicit def repToDenseVectorDenseVectorOpsCls[T:Manifest](x: Rep[DenseVector[T]])(implicit __pos: SourceContext) = new DenseVectorDenseVectorOpsCls(x)(implicitly[Manifest[T]],__pos)
  implicit def varToDenseVectorDenseVectorOpsCls[T:Manifest](x: Var[DenseVector[T]])(implicit __pos: SourceContext) = new DenseVectorDenseVectorOpsCls(readVar(x))(implicitly[Manifest[T]],__pos)

  class DenseVectorDenseVectorOpsCls[T:Manifest](val self: Rep[DenseVector[T]])(implicit __pos: SourceContext) {
    def apply(__arg1: Rep[Int])(implicit __pos: SourceContext,__imp1: Overload27) = densevector_apply[T](self,__arg1)(implicitly[Manifest[T]],__pos,overload27)
    def apply(__arg1: Rep[IndexVector])(implicit __pos: SourceContext,__imp1: Overload28) = densevector_apply[T](self,__arg1)(implicitly[Manifest[T]],__pos,overload28)
    def update(i: Rep[Int],e: Rep[T])(implicit __pos: SourceContext,__imp1: Overload10) = densevector_update[T](self,i,e)(implicitly[Manifest[T]],__pos,overload10)
    def update(indices: Rep[IndexVector],e: Rep[T])(implicit __pos: SourceContext,__imp1: Overload11) = densevector_update[T](self,indices,e)(implicitly[Manifest[T]],__pos,overload11)
    def update(indices: Rep[IndexVector],v: Rep[DenseVector[T]])(implicit __pos: SourceContext,__imp1: Overload12) = densevector_update[T](self,indices,v)(implicitly[Manifest[T]],__pos,overload12)
    def <<=(__arg1: Rep[T])(implicit __pos: SourceContext,__imp1: Overload6) = densevector_ltlteq[T](self,__arg1)(implicitly[Manifest[T]],__pos,overload6)
    def <<=(__arg1: Rep[DenseVector[T]])(implicit __pos: SourceContext,__imp1: Overload7) = densevector_ltlteq[T](self,__arg1)(implicitly[Manifest[T]],__pos,overload7)
    def sortBy[B:Manifest](__arg1: (Rep[T]) => Rep[B])(implicit __pos: SourceContext,__imp0: Ordering[B]) = densevector_sortby[T,B](self,__arg1)(implicitly[Manifest[T]],implicitly[Manifest[B]],__pos,__imp0)
    def groupByReduce[K:Manifest,V:Manifest](__arg1: (Rep[T]) => Rep[K],__arg2: (Rep[T]) => Rep[V],__arg3: (Rep[V],Rep[V]) => Rep[V])(implicit __pos: SourceContext,__imp0: Arith[V]) = densevector_groupbyreduce[T,K,V](self,__arg1,__arg2,__arg3)(implicitly[Manifest[T]],implicitly[Manifest[K]],implicitly[Manifest[V]],__pos,__imp0)
    def groupBy[K:Manifest,V:Manifest](__arg1: (Rep[T]) => Rep[K],__arg2: (Rep[T]) => Rep[V])(implicit __pos: SourceContext) = densevector_groupby[T,K,V](self,__arg1,__arg2)(implicitly[Manifest[T]],implicitly[Manifest[K]],implicitly[Manifest[V]],__pos)
    def filter(__arg1: (Rep[T]) => Rep[Boolean])(implicit __pos: SourceContext,__imp1: Overload3) = densevector_filter[T](self,__arg1)(implicitly[Manifest[T]],__pos)
    def toBoolean(implicit __pos: SourceContext,conv: (Rep[T]) => Rep[Boolean],__imp2: Overload5) = densevector_toboolean[T](self)(implicitly[Manifest[T]],__pos,conv)
    def toDouble(implicit __pos: SourceContext,conv: (Rep[T]) => Rep[Double],__imp2: Overload6) = densevector_todouble[T](self)(implicitly[Manifest[T]],__pos,conv)
    def toFloat(implicit __pos: SourceContext,conv: (Rep[T]) => Rep[Float],__imp2: Overload6) = densevector_tofloat[T](self)(implicitly[Manifest[T]],__pos,conv)
    def toInt(implicit __pos: SourceContext,conv: (Rep[T]) => Rep[Int],__imp2: Overload6) = densevector_toint[T](self)(implicitly[Manifest[T]],__pos,conv)
    def -(__arg1: Rep[DenseVector[T]])(implicit __pos: SourceContext,__imp0: Arith[T],__imp2: Overload97) = densevector_sub[T](self,__arg1)(implicitly[Manifest[T]],__pos,__imp0,overload97)
    def *(__arg1: Rep[DenseVector[T]])(implicit __pos: SourceContext,__imp0: Arith[T],__imp2: Overload136) = densevector_mul[T](self,__arg1)(implicitly[Manifest[T]],__pos,__imp0,overload136)
    def /(__arg1: Rep[DenseVector[T]])(implicit __pos: SourceContext,__imp0: Arith[T],__imp2: Overload98) = densevector_div[T](self,__arg1)(implicitly[Manifest[T]],__pos,__imp0,overload98)
    def -(__arg1: Rep[DenseVectorView[T]])(implicit __pos: SourceContext,__imp0: Arith[T],__imp2: Overload98) = densevector_sub[T](self,__arg1)(implicitly[Manifest[T]],__pos,__imp0,overload98)
    def *(__arg1: Rep[DenseVectorView[T]])(implicit __pos: SourceContext,__imp0: Arith[T],__imp2: Overload137) = densevector_mul[T](self,__arg1)(implicitly[Manifest[T]],__pos,__imp0,overload137)
    def /(__arg1: Rep[DenseVectorView[T]])(implicit __pos: SourceContext,__imp0: Arith[T],__imp2: Overload99) = densevector_div[T](self,__arg1)(implicitly[Manifest[T]],__pos,__imp0,overload99)
    def -(__arg1: Rep[SparseVector[T]])(implicit __pos: SourceContext,__imp0: Arith[T],__imp2: Overload99) = densevector_sub[T](self,__arg1)(implicitly[Manifest[T]],__pos,__imp0,overload99)
    def *(__arg1: Rep[SparseVector[T]])(implicit __pos: SourceContext,__imp0: Arith[T],__imp2: Overload138) = densevector_mul[T](self,__arg1)(implicitly[Manifest[T]],__pos,__imp0,overload138)
    def /(__arg1: Rep[SparseVector[T]])(implicit __pos: SourceContext,__imp0: Arith[T],__imp2: Overload100) = densevector_div[T](self,__arg1)(implicitly[Manifest[T]],__pos,__imp0,overload100)
    def -(__arg1: Rep[SparseVectorView[T]])(implicit __pos: SourceContext,__imp0: Arith[T],__imp2: Overload100) = densevector_sub[T](self,__arg1)(implicitly[Manifest[T]],__pos,__imp0,overload100)
    def *(__arg1: Rep[SparseVectorView[T]])(implicit __pos: SourceContext,__imp0: Arith[T],__imp2: Overload139) = densevector_mul[T](self,__arg1)(implicitly[Manifest[T]],__pos,__imp0,overload139)
    def /(__arg1: Rep[SparseVectorView[T]])(implicit __pos: SourceContext,__imp0: Arith[T],__imp2: Overload101) = densevector_div[T](self,__arg1)(implicitly[Manifest[T]],__pos,__imp0,overload101)
    def zip[B:Manifest,R:Manifest](__arg1: Rep[DenseVector[B]])(__arg2: (Rep[T],Rep[B]) => Rep[R])(implicit __pos: SourceContext,__imp1: Overload6) = densevector_zip[T,B,R](self,__arg1,__arg2)(implicitly[Manifest[T]],implicitly[Manifest[B]],implicitly[Manifest[R]],__pos,overload6)
    def zip[B:Manifest,R:Manifest](__arg1: Rep[DenseVectorView[B]])(__arg2: (Rep[T],Rep[B]) => Rep[R])(implicit __pos: SourceContext,__imp1: Overload7) = densevector_zip[T,B,R](self,__arg1,__arg2)(implicitly[Manifest[T]],implicitly[Manifest[B]],implicitly[Manifest[R]],__pos,overload7)
    def -(__arg1: Rep[T])(implicit __pos: SourceContext,__imp0: Arith[T],__imp2: Overload101) = densevector_sub[T](self,__arg1)(implicitly[Manifest[T]],__pos,__imp0,overload101)
    def *(__arg1: Rep[T])(implicit __pos: SourceContext,__imp0: Arith[T],__imp2: Overload140) = densevector_mul[T](self,__arg1)(implicitly[Manifest[T]],__pos,__imp0,overload140)
    def *(__arg1: Rep[DenseMatrix[T]])(implicit __pos: SourceContext,__imp0: Arith[T],__imp2: Overload141) = densevector_mul[T](self,__arg1)(implicitly[Manifest[T]],__pos,__imp0,overload141)
    def /(__arg1: Rep[T])(implicit __pos: SourceContext,__imp0: Arith[T],__imp2: Overload102) = densevector_div[T](self,__arg1)(implicitly[Manifest[T]],__pos,__imp0,overload102)
    def mean(implicit __pos: SourceContext,conv: (Rep[T]) => Rep[Double],__imp2: Overload5) = densevector_mean[T](self)(implicitly[Manifest[T]],__pos,conv)
    def map[R:Manifest](__arg1: (Rep[T]) => Rep[R])(implicit __pos: SourceContext,__imp1: Overload4) = densevector_map[T,R](self,__arg1)(implicitly[Manifest[T]],implicitly[Manifest[R]],__pos)
    def reduce(__arg1: (Rep[T],Rep[T]) => Rep[T])(implicit __pos: SourceContext,__imp0: Arith[T],__imp2: Overload3) = densevector_reduce[T](self,__arg1)(implicitly[Manifest[T]],__pos,__imp0)
    def foreach(__arg1: (Rep[T]) => Rep[Unit])(implicit __pos: SourceContext,__imp1: Overload5) = densevector_foreach[T](self,__arg1)(implicitly[Manifest[T]],__pos)
    def find(__arg1: (Rep[T]) => Rep[Boolean])(implicit __pos: SourceContext,__imp1: Overload3) = densevector_find[T](self,__arg1)(implicitly[Manifest[T]],__pos)
    def count(__arg1: (Rep[T]) => Rep[Boolean])(implicit __pos: SourceContext,__imp1: Overload4) = densevector_count[T](self,__arg1)(implicitly[Manifest[T]],__pos)
    def partition(pred: (Rep[T]) => Rep[Boolean])(implicit __pos: SourceContext,__imp1: Overload3) = densevector_partition[T](self,pred)(implicitly[Manifest[T]],__pos)
    def flatMap[R:Manifest](__arg1: (Rep[T]) => Rep[DenseVector[R]])(implicit __pos: SourceContext,__imp1: Overload3) = densevector_flatmap[T,R](self,__arg1)(implicitly[Manifest[T]],implicitly[Manifest[R]],__pos)
    def scan[R:Manifest](zero: Rep[R])(__arg2: (Rep[R],Rep[T]) => Rep[R])(implicit __pos: SourceContext,__imp1: Overload3) = densevector_scan[T,R](self,zero,__arg2)(implicitly[Manifest[T]],implicitly[Manifest[R]],__pos)
  }

  implicit def repToDenseVectorDenseVectorIntOpsCls(x: Rep[DenseVector[Int]])(implicit __pos: SourceContext) = new DenseVectorDenseVectorIntOpsCls(x)(__pos)
  implicit def varToDenseVectorDenseVectorIntOpsCls(x: Var[DenseVector[Int]])(implicit __pos: SourceContext) = new DenseVectorDenseVectorIntOpsCls(readVar(x))(__pos)

  class DenseVectorDenseVectorIntOpsCls(val self: Rep[DenseVector[Int]])(implicit __pos: SourceContext) {
    def -(__arg1: Rep[Int])(implicit __pos: SourceContext,__imp1: ROverload79) = { densevector_sub[Int](self,__arg1) }
    def -(__arg1: Rep[Float])(implicit __pos: SourceContext,__imp1: ROverload80) = { densevector_sub[Float](self.toFloat,__arg1) }
    def -(__arg1: Rep[Double])(implicit __pos: SourceContext,__imp1: ROverload81) = { densevector_sub[Double](self.toDouble,__arg1) }
    def -(__arg1: Rep[DenseVector[Int]])(implicit __pos: SourceContext,__imp1: ROverload88) = { densevector_sub[Int](self,__arg1) }
    def -(__arg1: Rep[DenseVector[Float]])(implicit __pos: SourceContext,__imp1: ROverload89) = { densevector_sub[Float](self.toFloat,__arg1) }
    def -(__arg1: Rep[DenseVector[Double]])(implicit __pos: SourceContext,__imp1: ROverload90) = { densevector_sub[Double](self.toDouble,__arg1) }
    def *(__arg1: Rep[Int])(implicit __pos: SourceContext,__imp1: ROverload109) = { densevector_mul[Int](self,__arg1) }
    def *(__arg1: Rep[Float])(implicit __pos: SourceContext,__imp1: ROverload110) = { densevector_mul[Float](self.toFloat,__arg1) }
    def *(__arg1: Rep[Double])(implicit __pos: SourceContext,__imp1: ROverload111) = { densevector_mul[Double](self.toDouble,__arg1) }
    def *(__arg1: Rep[DenseVector[Int]])(implicit __pos: SourceContext,__imp1: ROverload118) = { densevector_mul[Int](self,__arg1) }
    def *(__arg1: Rep[DenseVector[Float]])(implicit __pos: SourceContext,__imp1: ROverload119) = { densevector_mul[Float](self.toFloat,__arg1) }
    def *(__arg1: Rep[DenseVector[Double]])(implicit __pos: SourceContext,__imp1: ROverload120) = { densevector_mul[Double](self.toDouble,__arg1) }
    def *(__arg1: Rep[DenseMatrix[Int]])(implicit __pos: SourceContext,__imp1: ROverload127) = { densevector_mul[Int](self,__arg1) }
    def *(__arg1: Rep[DenseMatrix[Float]])(implicit __pos: SourceContext,__imp1: ROverload128) = { densevector_mul[Float](self.toFloat,__arg1) }
    def *(__arg1: Rep[DenseMatrix[Double]])(implicit __pos: SourceContext,__imp1: ROverload129) = { densevector_mul[Double](self.toDouble,__arg1) }
    def /(__arg1: Rep[Int])(implicit __pos: SourceContext,__imp1: ROverload80) = { densevector_div[Int](self,__arg1) }
    def /(__arg1: Rep[Float])(implicit __pos: SourceContext,__imp1: ROverload81) = { densevector_div[Float](self.toFloat,__arg1) }
    def /(__arg1: Rep[Double])(implicit __pos: SourceContext,__imp1: ROverload82) = { densevector_div[Double](self.toDouble,__arg1) }
    def /(__arg1: Rep[DenseVector[Int]])(implicit __pos: SourceContext,__imp1: ROverload89) = { densevector_div[Int](self,__arg1) }
    def /(__arg1: Rep[DenseVector[Float]])(implicit __pos: SourceContext,__imp1: ROverload90) = { densevector_div[Float](self.toFloat,__arg1) }
    def /(__arg1: Rep[DenseVector[Double]])(implicit __pos: SourceContext,__imp1: ROverload91) = { densevector_div[Double](self.toDouble,__arg1) }
  }

  implicit def repToDenseVectorDenseVectorFloatOpsCls(x: Rep[DenseVector[Float]])(implicit __pos: SourceContext) = new DenseVectorDenseVectorFloatOpsCls(x)(__pos)
  implicit def varToDenseVectorDenseVectorFloatOpsCls(x: Var[DenseVector[Float]])(implicit __pos: SourceContext) = new DenseVectorDenseVectorFloatOpsCls(readVar(x))(__pos)

  class DenseVectorDenseVectorFloatOpsCls(val self: Rep[DenseVector[Float]])(implicit __pos: SourceContext) {
    def -(__arg1: Rep[Int])(implicit __pos: SourceContext,__imp1: ROverload82) = { densevector_sub[Float](self,__arg1.toFloat) }
    def -(__arg1: Rep[Float])(implicit __pos: SourceContext,__imp1: ROverload83) = { densevector_sub[Float](self,__arg1) }
    def -(__arg1: Rep[Double])(implicit __pos: SourceContext,__imp1: ROverload84) = { densevector_sub[Double](self.toDouble,__arg1) }
    def -(__arg1: Rep[DenseVector[Int]])(implicit __pos: SourceContext,__imp1: ROverload91) = { densevector_sub[Float](self,__arg1.toFloat) }
    def -(__arg1: Rep[DenseVector[Float]])(implicit __pos: SourceContext,__imp1: ROverload92) = { densevector_sub[Float](self,__arg1) }
    def -(__arg1: Rep[DenseVector[Double]])(implicit __pos: SourceContext,__imp1: ROverload93) = { densevector_sub[Double](self.toDouble,__arg1) }
    def *(__arg1: Rep[Int])(implicit __pos: SourceContext,__imp1: ROverload112) = { densevector_mul[Float](self,__arg1.toFloat) }
    def *(__arg1: Rep[Float])(implicit __pos: SourceContext,__imp1: ROverload113) = { densevector_mul[Float](self,__arg1) }
    def *(__arg1: Rep[Double])(implicit __pos: SourceContext,__imp1: ROverload114) = { densevector_mul[Double](self.toDouble,__arg1) }
    def *(__arg1: Rep[DenseVector[Int]])(implicit __pos: SourceContext,__imp1: ROverload121) = { densevector_mul[Float](self,__arg1.toFloat) }
    def *(__arg1: Rep[DenseVector[Float]])(implicit __pos: SourceContext,__imp1: ROverload122) = { densevector_mul[Float](self,__arg1) }
    def *(__arg1: Rep[DenseVector[Double]])(implicit __pos: SourceContext,__imp1: ROverload123) = { densevector_mul[Double](self.toDouble,__arg1) }
    def *(__arg1: Rep[DenseMatrix[Int]])(implicit __pos: SourceContext,__imp1: ROverload130) = { densevector_mul[Float](self,__arg1.toFloat) }
    def *(__arg1: Rep[DenseMatrix[Float]])(implicit __pos: SourceContext,__imp1: ROverload131) = { densevector_mul[Float](self,__arg1) }
    def *(__arg1: Rep[DenseMatrix[Double]])(implicit __pos: SourceContext,__imp1: ROverload132) = { densevector_mul[Double](self.toDouble,__arg1) }
    def /(__arg1: Rep[Int])(implicit __pos: SourceContext,__imp1: ROverload83) = { densevector_div[Float](self,__arg1.toFloat) }
    def /(__arg1: Rep[Float])(implicit __pos: SourceContext,__imp1: ROverload84) = { densevector_div[Float](self,__arg1) }
    def /(__arg1: Rep[Double])(implicit __pos: SourceContext,__imp1: ROverload85) = { densevector_div[Double](self.toDouble,__arg1) }
    def /(__arg1: Rep[DenseVector[Int]])(implicit __pos: SourceContext,__imp1: ROverload92) = { densevector_div[Float](self,__arg1.toFloat) }
    def /(__arg1: Rep[DenseVector[Float]])(implicit __pos: SourceContext,__imp1: ROverload93) = { densevector_div[Float](self,__arg1) }
    def /(__arg1: Rep[DenseVector[Double]])(implicit __pos: SourceContext,__imp1: ROverload94) = { densevector_div[Double](self.toDouble,__arg1) }
  }

  implicit def repToDenseVectorDenseVectorDoubleOpsCls(x: Rep[DenseVector[Double]])(implicit __pos: SourceContext) = new DenseVectorDenseVectorDoubleOpsCls(x)(__pos)
  implicit def varToDenseVectorDenseVectorDoubleOpsCls(x: Var[DenseVector[Double]])(implicit __pos: SourceContext) = new DenseVectorDenseVectorDoubleOpsCls(readVar(x))(__pos)

  class DenseVectorDenseVectorDoubleOpsCls(val self: Rep[DenseVector[Double]])(implicit __pos: SourceContext) {
    def -(__arg1: Rep[Int])(implicit __pos: SourceContext,__imp1: ROverload85) = { densevector_sub[Double](self,__arg1.toDouble) }
    def -(__arg1: Rep[Float])(implicit __pos: SourceContext,__imp1: ROverload86) = { densevector_sub[Double](self.toDouble,__arg1) }
    def -(__arg1: Rep[Double])(implicit __pos: SourceContext,__imp1: ROverload87) = { densevector_sub[Double](self,__arg1) }
    def -(__arg1: Rep[DenseVector[Int]])(implicit __pos: SourceContext,__imp1: ROverload94) = { densevector_sub[Double](self,__arg1.toDouble) }
    def -(__arg1: Rep[DenseVector[Float]])(implicit __pos: SourceContext,__imp1: ROverload95) = { densevector_sub[Double](self,__arg1.toDouble) }
    def -(__arg1: Rep[DenseVector[Double]])(implicit __pos: SourceContext,__imp1: ROverload96) = { densevector_sub[Double](self,__arg1) }
    def *(__arg1: Rep[Int])(implicit __pos: SourceContext,__imp1: ROverload115) = { densevector_mul[Double](self,__arg1.toDouble) }
    def *(__arg1: Rep[Float])(implicit __pos: SourceContext,__imp1: ROverload116) = { densevector_mul[Double](self.toDouble,__arg1) }
    def *(__arg1: Rep[Double])(implicit __pos: SourceContext,__imp1: ROverload117) = { densevector_mul[Double](self,__arg1) }
    def *(__arg1: Rep[DenseVector[Int]])(implicit __pos: SourceContext,__imp1: ROverload124) = { densevector_mul[Double](self,__arg1.toDouble) }
    def *(__arg1: Rep[DenseVector[Float]])(implicit __pos: SourceContext,__imp1: ROverload125) = { densevector_mul[Double](self,__arg1.toDouble) }
    def *(__arg1: Rep[DenseVector[Double]])(implicit __pos: SourceContext,__imp1: ROverload126) = { densevector_mul[Double](self,__arg1) }
    def *(__arg1: Rep[DenseMatrix[Int]])(implicit __pos: SourceContext,__imp1: ROverload133) = { densevector_mul[Double](self,__arg1.toDouble) }
    def *(__arg1: Rep[DenseMatrix[Float]])(implicit __pos: SourceContext,__imp1: ROverload134) = { densevector_mul[Double](self,__arg1.toDouble) }
    def *(__arg1: Rep[DenseMatrix[Double]])(implicit __pos: SourceContext,__imp1: ROverload135) = { densevector_mul[Double](self,__arg1) }
    def /(__arg1: Rep[Int])(implicit __pos: SourceContext,__imp1: ROverload86) = { densevector_div[Double](self,__arg1.toDouble) }
    def /(__arg1: Rep[Float])(implicit __pos: SourceContext,__imp1: ROverload87) = { densevector_div[Double](self.toDouble,__arg1) }
    def /(__arg1: Rep[Double])(implicit __pos: SourceContext,__imp1: ROverload88) = { densevector_div[Double](self,__arg1) }
    def /(__arg1: Rep[DenseVector[Int]])(implicit __pos: SourceContext,__imp1: ROverload95) = { densevector_div[Double](self,__arg1.toDouble) }
    def /(__arg1: Rep[DenseVector[Float]])(implicit __pos: SourceContext,__imp1: ROverload96) = { densevector_div[Double](self,__arg1.toDouble) }
    def /(__arg1: Rep[DenseVector[Double]])(implicit __pos: SourceContext,__imp1: ROverload97) = { densevector_div[Double](self,__arg1) }
  }

  implicit def repToDenseVectorIntOpsCls(x: Rep[Int])(implicit __pos: SourceContext) = new DenseVectorIntOpsCls(x)(__pos)
  implicit def varToDenseVectorIntOpsCls(x: Var[Int])(implicit __pos: SourceContext) = new DenseVectorIntOpsCls(readVar(x))(__pos)

  class DenseVectorIntOpsCls(val self: Rep[Int])(implicit __pos: SourceContext) {
    def *(__arg1: Rep[DenseVector[Int]])(implicit __pos: SourceContext,__imp1: ROverload100) = { densevector_mul[Int](__arg1,self) }
    def *(__arg1: Rep[DenseVector[Float]])(implicit __pos: SourceContext,__imp1: ROverload101) = { densevector_mul[Float](__arg1,self.toFloat) }
    def *(__arg1: Rep[DenseVector[Double]])(implicit __pos: SourceContext,__imp1: ROverload102) = { densevector_mul[Double](__arg1,self.toDouble) }
  }

  implicit def repToDenseVectorFloatOpsCls(x: Rep[Float])(implicit __pos: SourceContext) = new DenseVectorFloatOpsCls(x)(__pos)
  implicit def varToDenseVectorFloatOpsCls(x: Var[Float])(implicit __pos: SourceContext) = new DenseVectorFloatOpsCls(readVar(x))(__pos)

  class DenseVectorFloatOpsCls(val self: Rep[Float])(implicit __pos: SourceContext) {
    def *(__arg1: Rep[DenseVector[Int]])(implicit __pos: SourceContext,__imp1: ROverload103) = { densevector_mul[Float](__arg1.toFloat,self) }
    def *(__arg1: Rep[DenseVector[Float]])(implicit __pos: SourceContext,__imp1: ROverload104) = { densevector_mul[Float](__arg1,self) }
    def *(__arg1: Rep[DenseVector[Double]])(implicit __pos: SourceContext,__imp1: ROverload105) = { densevector_mul[Double](__arg1,self.toDouble) }
  }

  implicit def repToDenseVectorDoubleOpsCls(x: Rep[Double])(implicit __pos: SourceContext) = new DenseVectorDoubleOpsCls(x)(__pos)
  implicit def varToDenseVectorDoubleOpsCls(x: Var[Double])(implicit __pos: SourceContext) = new DenseVectorDoubleOpsCls(readVar(x))(__pos)

  class DenseVectorDoubleOpsCls(val self: Rep[Double])(implicit __pos: SourceContext) {
    def *(__arg1: Rep[DenseVector[Int]])(implicit __pos: SourceContext,__imp1: ROverload106) = { densevector_mul[Double](__arg1.toDouble,self) }
    def *(__arg1: Rep[DenseVector[Float]])(implicit __pos: SourceContext,__imp1: ROverload107) = { densevector_mul[Double](__arg1.toDouble,self) }
    def *(__arg1: Rep[DenseVector[Double]])(implicit __pos: SourceContext,__imp1: ROverload108) = { densevector_mul[Double](__arg1,self) }
  }


  def infix_toVector[T:Manifest,R:Manifest](__arg0: Rep[ForgeHashMap[T,R]])(implicit __pos: SourceContext) = densevector_tovector[T,R](__arg0)(implicitly[Manifest[T]],implicitly[Manifest[R]],__pos)
  def infix_length[T:Manifest](self: Rep[DenseVector[T]])(implicit __pos: SourceContext,__imp1: Overload6) = densevector_length[T](self)(implicitly[Manifest[T]],__pos)
  def infix_isRow[T:Manifest](self: Rep[DenseVector[T]])(implicit __pos: SourceContext,__imp1: Overload5) = densevector_isrow[T](self)(implicitly[Manifest[T]],__pos)
  def infix_slice[T:Manifest](self: Rep[DenseVector[T]],start: Rep[Int],end: Rep[Int])(implicit __pos: SourceContext,__imp1: ROverload6): Rep[DenseVector[T]] = { self(start::end) }
  def infix_t[T:Manifest](self: Rep[DenseVector[T]])(implicit __pos: SourceContext,__imp1: Overload4) = densevector_t[T](self)(implicitly[Manifest[T]],__pos)
  def infix_mt[T:Manifest](self: Rep[DenseVector[T]])(implicit __pos: SourceContext,__imp1: Overload2) = densevector_mt[T](self)(implicitly[Manifest[T]],__pos)
  def infix_toMat[T:Manifest](self: Rep[DenseVector[T]])(implicit __pos: SourceContext) = densevector_tomat[T](self)(implicitly[Manifest[T]],__pos)
  def infix_Clone[T:Manifest](self: Rep[DenseVector[T]])(implicit __pos: SourceContext,__imp1: Overload6) = densevector_clone[T](self)(implicitly[Manifest[T]],__pos)
  def infix_<<[T:Manifest](self: Rep[DenseVector[T]],__arg1: Rep[T])(implicit __pos: SourceContext,__imp1: Overload7) = densevector_ltlt[T](self,__arg1)(implicitly[Manifest[T]],__pos,overload7)
  def infix_<<[T:Manifest](self: Rep[DenseVector[T]],__arg1: Rep[DenseVector[T]])(implicit __pos: SourceContext,__imp1: Overload8) = densevector_ltlt[T](self,__arg1)(implicitly[Manifest[T]],__pos,overload8)
  def infix_insert[T:Manifest](self: Rep[DenseVector[T]],__arg1: Rep[Int],__arg2: Rep[T])(implicit __pos: SourceContext,__imp1: Overload2) = densevector_insert[T](self,__arg1,__arg2)(implicitly[Manifest[T]],__pos)
  def infix_insertAll[T:Manifest](self: Rep[DenseVector[T]],__arg1: Rep[Int],__arg2: Rep[DenseVector[T]])(implicit __pos: SourceContext,__imp1: Overload2) = densevector_insertall[T](self,__arg1,__arg2)(implicitly[Manifest[T]],__pos)
  def infix_remove[T:Manifest](self: Rep[DenseVector[T]],__arg1: Rep[Int])(implicit __pos: SourceContext,__imp1: Overload2) = densevector_remove[T](self,__arg1)(implicitly[Manifest[T]],__pos)
  def infix_removeAll[T:Manifest](self: Rep[DenseVector[T]],pos: Rep[Int],len: Rep[Int])(implicit __pos: SourceContext,__imp1: Overload2) = densevector_removeall[T](self,pos,len)(implicitly[Manifest[T]],__pos)
  def infix_copyFrom[T:Manifest](self: Rep[DenseVector[T]],__arg1: Rep[Int],__arg2: Rep[DenseVector[T]])(implicit __pos: SourceContext,__imp1: Overload2) = densevector_copyfrom[T](self,__arg1,__arg2)(implicitly[Manifest[T]],__pos)
  def infix_trim[T:Manifest](self: Rep[DenseVector[T]])(implicit __pos: SourceContext,__imp1: Overload4) = densevector_trim[T](self)(implicitly[Manifest[T]],__pos)
  def infix_clear[T:Manifest](self: Rep[DenseVector[T]])(implicit __pos: SourceContext,__imp1: Overload2) = densevector_clear[T](self)(implicitly[Manifest[T]],__pos)
  def infix_+=[T:Manifest](self: Rep[DenseVector[T]],__arg1: Rep[DenseVector[T]])(implicit __pos: SourceContext,__imp0: Arith[T],__imp2: Overload3) = densevector_pleq[T](self,__arg1)(implicitly[Manifest[T]],__pos,__imp0,overload3)
  def infix_+=[T:Manifest](self: Rep[DenseVector[T]],__arg1: Rep[T])(implicit __pos: SourceContext,__imp0: Arith[T],__imp2: Overload4) = densevector_pleq[T](self,__arg1)(implicitly[Manifest[T]],__pos,__imp0,overload4)
  def infix_+=[T:Manifest](self: Rep[DenseVector[T]],__arg1: Rep[DenseVectorView[T]])(implicit __pos: SourceContext,__imp0: Arith[T],__imp2: Overload5) = densevector_pleq[T](self,__arg1)(implicitly[Manifest[T]],__pos,__imp0,overload5)
  def infix_*=[T:Manifest](self: Rep[DenseVector[T]],__arg1: Rep[DenseVector[T]])(implicit __pos: SourceContext,__imp0: Arith[T],__imp2: Overload3) = densevector_muleq[T](self,__arg1)(implicitly[Manifest[T]],__pos,__imp0,overload3)
  def infix_*=[T:Manifest](self: Rep[DenseVector[T]],__arg1: Rep[T])(implicit __pos: SourceContext,__imp0: Arith[T],__imp2: Overload4) = densevector_muleq[T](self,__arg1)(implicitly[Manifest[T]],__pos,__imp0,overload4)
  def infix_*=[T:Manifest](self: Rep[DenseVector[T]],__arg1: Rep[DenseVectorView[T]])(implicit __pos: SourceContext,__imp0: Arith[T],__imp2: Overload5) = densevector_muleq[T](self,__arg1)(implicitly[Manifest[T]],__pos,__imp0,overload5)
  def infix_-=[T:Manifest](self: Rep[DenseVector[T]],__arg1: Rep[DenseVector[T]])(implicit __pos: SourceContext,__imp0: Arith[T],__imp2: Overload3) = densevector_subeq[T](self,__arg1)(implicitly[Manifest[T]],__pos,__imp0,overload3)
  def infix_-=[T:Manifest](self: Rep[DenseVector[T]],__arg1: Rep[T])(implicit __pos: SourceContext,__imp0: Arith[T],__imp2: Overload4) = densevector_subeq[T](self,__arg1)(implicitly[Manifest[T]],__pos,__imp0,overload4)
  def infix_-=[T:Manifest](self: Rep[DenseVector[T]],__arg1: Rep[DenseVectorView[T]])(implicit __pos: SourceContext,__imp0: Arith[T],__imp2: Overload5) = densevector_subeq[T](self,__arg1)(implicitly[Manifest[T]],__pos,__imp0,overload5)
  def infix_/=[T:Manifest](self: Rep[DenseVector[T]],__arg1: Rep[DenseVector[T]])(implicit __pos: SourceContext,__imp0: Arith[T],__imp2: Overload3) = densevector_diveq[T](self,__arg1)(implicitly[Manifest[T]],__pos,__imp0,overload3)
  def infix_/=[T:Manifest](self: Rep[DenseVector[T]],__arg1: Rep[T])(implicit __pos: SourceContext,__imp0: Arith[T],__imp2: Overload4) = densevector_diveq[T](self,__arg1)(implicitly[Manifest[T]],__pos,__imp0,overload4)
  def infix_/=[T:Manifest](self: Rep[DenseVector[T]],__arg1: Rep[DenseVectorView[T]])(implicit __pos: SourceContext,__imp0: Arith[T],__imp2: Overload5) = densevector_diveq[T](self,__arg1)(implicitly[Manifest[T]],__pos,__imp0,overload5)
  def infix_sort[T:Manifest](self: Rep[DenseVector[T]])(implicit __pos: SourceContext,__imp0: Ordering[T]) = densevector_sort[T](self)(implicitly[Manifest[T]],__pos,__imp0)
  def infix_sortWithIndex[T:Manifest](self: Rep[DenseVector[T]])(implicit __pos: SourceContext,__imp0: Ordering[T]) = densevector_sortwithindex[T](self)(implicitly[Manifest[T]],__pos,__imp0)
  def infix_median[T:Manifest](self: Rep[DenseVector[T]])(implicit __pos: SourceContext,__imp0: Numeric[T],__imp1: Ordering[T]) = densevector_median[T](self)(implicitly[Manifest[T]],__pos,__imp0,__imp1)
  def infix_:>[T:Manifest](self: Rep[DenseVector[T]],__arg1: Rep[DenseVector[T]])(implicit __pos: SourceContext,__imp0: Ordering[T],__imp2: Overload2) = densevector_clngt[T](self,__arg1)(implicitly[Manifest[T]],__pos,__imp0)
  def infix_:<[T:Manifest](self: Rep[DenseVector[T]],__arg1: Rep[DenseVector[T]])(implicit __pos: SourceContext,__imp0: Ordering[T],__imp2: Overload2) = densevector_clnlt[T](self,__arg1)(implicitly[Manifest[T]],__pos,__imp0)
  def infix_+(__arg0: Rep[Int],__arg1: Rep[DenseVector[Int]])(implicit __pos: SourceContext,__imp1: ROverload104): Rep[DenseVector[Int]] = { densevector_pl[Int](__arg1,__arg0) }
  def infix_+(__arg0: Rep[Int],__arg1: Rep[DenseVector[Float]])(implicit __pos: SourceContext,__imp1: ROverload105): Rep[DenseVector[Float]] = { densevector_pl[Float](__arg1,__arg0.toFloat) }
  def infix_+(__arg0: Rep[Int],__arg1: Rep[DenseVector[Double]])(implicit __pos: SourceContext,__imp1: ROverload106): Rep[DenseVector[Double]] = { densevector_pl[Double](__arg1,__arg0.toDouble) }
  def infix_+(__arg0: Rep[Float],__arg1: Rep[DenseVector[Int]])(implicit __pos: SourceContext,__imp1: ROverload107): Rep[DenseVector[Float]] = { densevector_pl[Float](__arg1.toFloat,__arg0) }
  def infix_+(__arg0: Rep[Float],__arg1: Rep[DenseVector[Float]])(implicit __pos: SourceContext,__imp1: ROverload108): Rep[DenseVector[Float]] = { densevector_pl[Float](__arg1,__arg0) }
  def infix_+(__arg0: Rep[Float],__arg1: Rep[DenseVector[Double]])(implicit __pos: SourceContext,__imp1: ROverload109): Rep[DenseVector[Double]] = { densevector_pl[Double](__arg1,__arg0.toDouble) }
  def infix_+(__arg0: Rep[Double],__arg1: Rep[DenseVector[Int]])(implicit __pos: SourceContext,__imp1: ROverload110): Rep[DenseVector[Double]] = { densevector_pl[Double](__arg1.toDouble,__arg0) }
  def infix_+(__arg0: Rep[Double],__arg1: Rep[DenseVector[Float]])(implicit __pos: SourceContext,__imp1: ROverload111): Rep[DenseVector[Double]] = { densevector_pl[Double](__arg1.toDouble,__arg0) }
  def infix_+(__arg0: Rep[Double],__arg1: Rep[DenseVector[Double]])(implicit __pos: SourceContext,__imp1: ROverload112): Rep[DenseVector[Double]] = { densevector_pl[Double](__arg1,__arg0) }
  def infix_+(__arg0: Rep[DenseVector[Int]],__arg1: Rep[Int])(implicit __pos: SourceContext,__imp1: ROverload113): Rep[DenseVector[Int]] = { densevector_pl[Int](__arg0,__arg1) }
  def infix_+(__arg0: Rep[DenseVector[Int]],__arg1: Rep[Float])(implicit __pos: SourceContext,__imp1: ROverload114): Rep[DenseVector[Float]] = { densevector_pl[Float](__arg0.toFloat,__arg1) }
  def infix_+(__arg0: Rep[DenseVector[Int]],__arg1: Rep[Double])(implicit __pos: SourceContext,__imp1: ROverload115): Rep[DenseVector[Double]] = { densevector_pl[Double](__arg0.toDouble,__arg1) }
  def infix_+(__arg0: Rep[DenseVector[Float]],__arg1: Rep[Int])(implicit __pos: SourceContext,__imp1: ROverload116): Rep[DenseVector[Float]] = { densevector_pl[Float](__arg0,__arg1.toFloat) }
  def infix_+(__arg0: Rep[DenseVector[Float]],__arg1: Rep[Float])(implicit __pos: SourceContext,__imp1: ROverload117): Rep[DenseVector[Float]] = { densevector_pl[Float](__arg0,__arg1) }
  def infix_+(__arg0: Rep[DenseVector[Float]],__arg1: Rep[Double])(implicit __pos: SourceContext,__imp1: ROverload118): Rep[DenseVector[Double]] = { densevector_pl[Double](__arg0.toDouble,__arg1) }
  def infix_+(__arg0: Rep[DenseVector[Double]],__arg1: Rep[Int])(implicit __pos: SourceContext,__imp1: ROverload119): Rep[DenseVector[Double]] = { densevector_pl[Double](__arg0,__arg1.toDouble) }
  def infix_+(__arg0: Rep[DenseVector[Double]],__arg1: Rep[Float])(implicit __pos: SourceContext,__imp1: ROverload120): Rep[DenseVector[Double]] = { densevector_pl[Double](__arg0.toDouble,__arg1) }
  def infix_+(__arg0: Rep[DenseVector[Double]],__arg1: Rep[Double])(implicit __pos: SourceContext,__imp1: ROverload121): Rep[DenseVector[Double]] = { densevector_pl[Double](__arg0,__arg1) }
  def infix_+(__arg0: Rep[DenseVector[Int]],__arg1: Rep[DenseVector[Int]])(implicit __pos: SourceContext,__imp1: ROverload122): Rep[DenseVector[Int]] = { densevector_pl[Int](__arg0,__arg1) }
  def infix_+(__arg0: Rep[DenseVector[Int]],__arg1: Rep[DenseVector[Float]])(implicit __pos: SourceContext,__imp1: ROverload123): Rep[DenseVector[Float]] = { densevector_pl[Float](__arg0.toFloat,__arg1) }
  def infix_+(__arg0: Rep[DenseVector[Int]],__arg1: Rep[DenseVector[Double]])(implicit __pos: SourceContext,__imp1: ROverload124): Rep[DenseVector[Double]] = { densevector_pl[Double](__arg0.toDouble,__arg1) }
  def infix_+(__arg0: Rep[DenseVector[Float]],__arg1: Rep[DenseVector[Int]])(implicit __pos: SourceContext,__imp1: ROverload125): Rep[DenseVector[Float]] = { densevector_pl[Float](__arg0,__arg1.toFloat) }
  def infix_+(__arg0: Rep[DenseVector[Float]],__arg1: Rep[DenseVector[Float]])(implicit __pos: SourceContext,__imp1: ROverload126): Rep[DenseVector[Float]] = { densevector_pl[Float](__arg0,__arg1) }
  def infix_+(__arg0: Rep[DenseVector[Float]],__arg1: Rep[DenseVector[Double]])(implicit __pos: SourceContext,__imp1: ROverload127): Rep[DenseVector[Double]] = { densevector_pl[Double](__arg0.toDouble,__arg1) }
  def infix_+(__arg0: Rep[DenseVector[Double]],__arg1: Rep[DenseVector[Int]])(implicit __pos: SourceContext,__imp1: ROverload128): Rep[DenseVector[Double]] = { densevector_pl[Double](__arg0,__arg1.toDouble) }
  def infix_+(__arg0: Rep[DenseVector[Double]],__arg1: Rep[DenseVector[Float]])(implicit __pos: SourceContext,__imp1: ROverload129): Rep[DenseVector[Double]] = { densevector_pl[Double](__arg0,__arg1.toDouble) }
  def infix_+(__arg0: Rep[DenseVector[Double]],__arg1: Rep[DenseVector[Double]])(implicit __pos: SourceContext,__imp1: ROverload130): Rep[DenseVector[Double]] = { densevector_pl[Double](__arg0,__arg1) }
  def infix_unary_-(__arg0: Rep[DenseVector[Int]])(implicit __pos: SourceContext,__imp1: ROverload8): Rep[DenseVector[Int]] = { densevector_mul[Int](__arg0,unit(-1)) }
  def infix_unary_-(__arg0: Rep[DenseVector[Float]])(implicit __pos: SourceContext,__imp1: ROverload9): Rep[DenseVector[Float]] = { densevector_mul[Float](__arg0,unit(-1f)) }
  def infix_unary_-(__arg0: Rep[DenseVector[Double]])(implicit __pos: SourceContext,__imp1: ROverload10): Rep[DenseVector[Double]] = { densevector_mul[Double](__arg0,unit(-1.0)) }
  def infix_indices[T:Manifest](self: Rep[DenseVector[T]])(implicit __pos: SourceContext,__imp1: Overload6) = densevector_indices[T](self)(implicitly[Manifest[T]],__pos)
  def infix_isEmpty[T:Manifest](self: Rep[DenseVector[T]])(implicit __pos: SourceContext,__imp1: Overload4) = densevector_isempty[T](self)(implicitly[Manifest[T]],__pos)
  def infix_first[T:Manifest](self: Rep[DenseVector[T]])(implicit __pos: SourceContext,__imp1: Overload4) = densevector_first[T](self)(implicitly[Manifest[T]],__pos)
  def infix_last[T:Manifest](self: Rep[DenseVector[T]])(implicit __pos: SourceContext,__imp1: Overload4) = densevector_last[T](self)(implicitly[Manifest[T]],__pos)
  def infix_drop[T:Manifest](self: Rep[DenseVector[T]],__arg1: Rep[Int])(implicit __pos: SourceContext,__imp1: Overload4) = densevector_drop[T](self,__arg1)(implicitly[Manifest[T]],__pos)
  def infix_take[T:Manifest](self: Rep[DenseVector[T]],__arg1: Rep[Int])(implicit __pos: SourceContext,__imp1: Overload4) = densevector_take[T](self,__arg1)(implicitly[Manifest[T]],__pos)
  def infix_contains[T:Manifest](self: Rep[DenseVector[T]],__arg1: Rep[T])(implicit __pos: SourceContext,__imp1: Overload9) = densevector_contains[T](self,__arg1)(implicitly[Manifest[T]],__pos)
  def infix_distinct[T:Manifest](self: Rep[DenseVector[T]])(implicit __pos: SourceContext,__imp1: Overload4) = densevector_distinct[T](self)(implicitly[Manifest[T]],__pos)
  def infix_mutable[T:Manifest](self: Rep[DenseVector[T]])(implicit __pos: SourceContext,__imp1: Overload15) = densevector_mutable[T](self)(implicitly[Manifest[T]],__pos)
  def infix_replicate[T:Manifest](self: Rep[DenseVector[T]],__arg1: Rep[Int],__arg2: Rep[Int])(implicit __pos: SourceContext,__imp1: Overload4) = densevector_replicate[T](self,__arg1,__arg2)(implicitly[Manifest[T]],__pos)
  def infix_makeString[T:Manifest](self: Rep[DenseVector[T]])(implicit __pos: SourceContext,__imp0: Stringable[T],__imp2: Overload6) = densevector_makestring[T](self)(implicitly[Manifest[T]],__pos,__imp0)
  def infix_toString[T:Manifest](self: Rep[DenseVector[T]])(implicit __imp0: Overload15) = densevector_tostring[T](self)
  def infix_pprint[T:Manifest](self: Rep[DenseVector[T]])(implicit __pos: SourceContext,__imp0: Stringable[T],__imp2: Overload6) = densevector_pprint[T](self)(implicitly[Manifest[T]],__pos,__imp0)
  def infix_+[T:Manifest](self: Rep[DenseVector[T]],__arg1: Rep[DenseVector[T]])(implicit __pos: SourceContext,__imp0: Arith[T],__imp2: Overload131) = densevector_pl[T](self,__arg1)(implicitly[Manifest[T]],__pos,__imp0,overload131)
  def infix_*:*[T:Manifest](self: Rep[DenseVector[T]],__arg1: Rep[DenseVector[T]])(implicit __pos: SourceContext,__imp0: Arith[T],__imp2: Overload22) = densevector_mulclnmul[T](self,__arg1)(implicitly[Manifest[T]],__pos,__imp0,overload22)
  def infix_**[T:Manifest](self: Rep[DenseVector[T]],__arg1: Rep[DenseVector[T]])(implicit __pos: SourceContext,__imp0: Arith[T],__imp2: Overload10) = densevector_mulmul[T](self,__arg1)(implicitly[Manifest[T]],__pos,__imp0,overload10)
  def infix_+[T:Manifest](self: Rep[DenseVector[T]],__arg1: Rep[DenseVectorView[T]])(implicit __pos: SourceContext,__imp0: Arith[T],__imp2: Overload132) = densevector_pl[T](self,__arg1)(implicitly[Manifest[T]],__pos,__imp0,overload132)
  def infix_*:*[T:Manifest](self: Rep[DenseVector[T]],__arg1: Rep[DenseVectorView[T]])(implicit __pos: SourceContext,__imp0: Arith[T],__imp2: Overload23) = densevector_dot_densevectorview[T](self,__arg1)(implicitly[Manifest[T]],__pos,__imp0)
  def infix_**[T:Manifest](self: Rep[DenseVector[T]],__arg1: Rep[DenseVectorView[T]])(implicit __pos: SourceContext,__imp0: Arith[T],__imp2: Overload11) = densevector_mulmul[T](self,__arg1)(implicitly[Manifest[T]],__pos,__imp0,overload11)
  def infix_+[T:Manifest](self: Rep[DenseVector[T]],__arg1: Rep[SparseVector[T]])(implicit __pos: SourceContext,__imp0: Arith[T],__imp2: Overload133) = densevector_pl[T](self,__arg1)(implicitly[Manifest[T]],__pos,__imp0,overload133)
  def infix_*:*[T:Manifest](self: Rep[DenseVector[T]],__arg1: Rep[SparseVector[T]])(implicit __pos: SourceContext,__imp0: Arith[T],__imp2: Overload24) = densevector_mulclnmul[T](self,__arg1)(implicitly[Manifest[T]],__pos,__imp0,overload24)
  def infix_**[T:Manifest](self: Rep[DenseVector[T]],__arg1: Rep[SparseVector[T]])(implicit __pos: SourceContext,__imp0: Arith[T],__imp2: Overload12) = densevector_mulmul[T](self,__arg1)(implicitly[Manifest[T]],__pos,__imp0,overload12)
  def infix_+[T:Manifest](self: Rep[DenseVector[T]],__arg1: Rep[SparseVectorView[T]])(implicit __pos: SourceContext,__imp0: Arith[T],__imp2: Overload134) = densevector_pl[T](self,__arg1)(implicitly[Manifest[T]],__pos,__imp0,overload134)
  def infix_*:*[T:Manifest](self: Rep[DenseVector[T]],__arg1: Rep[SparseVectorView[T]])(implicit __pos: SourceContext,__imp0: Arith[T],__imp2: Overload25) = densevector_mulclnmul[T](self,__arg1)(implicitly[Manifest[T]],__pos,__imp0,overload25)
  def infix_**[T:Manifest](self: Rep[DenseVector[T]],__arg1: Rep[SparseVectorView[T]])(implicit __pos: SourceContext,__imp0: Arith[T],__imp2: Overload13) = densevector_mulmul[T](self,__arg1)(implicitly[Manifest[T]],__pos,__imp0,overload13)
  def infix_+[T:Manifest](self: Rep[DenseVector[T]],__arg1: Rep[T])(implicit __pos: SourceContext,__imp0: Arith[T],__imp2: Overload135) = densevector_pl[T](self,__arg1)(implicitly[Manifest[T]],__pos,__imp0,overload135)
  def infix_abs[T:Manifest](self: Rep[DenseVector[T]])(implicit __pos: SourceContext,__imp0: Arith[T],__imp2: Overload21) = densevector_abs[T](self)(implicitly[Manifest[T]],__pos,__imp0)
  def infix_exp[T:Manifest](self: Rep[DenseVector[T]])(implicit __pos: SourceContext,__imp0: Arith[T],__imp2: Overload20) = densevector_exp[T](self)(implicitly[Manifest[T]],__pos,__imp0)
  def infix_log[T:Manifest](self: Rep[DenseVector[T]])(implicit __pos: SourceContext,__imp0: Arith[T],__imp2: Overload20) = densevector_log[T](self)(implicitly[Manifest[T]],__pos,__imp0)
  def infix_sum[T:Manifest](self: Rep[DenseVector[T]])(implicit __pos: SourceContext,__imp0: Arith[T],__imp2: Overload5) = densevector_sum[T](self)(implicitly[Manifest[T]],__pos,__imp0)
  def infix_prod[T:Manifest](self: Rep[DenseVector[T]])(implicit __pos: SourceContext,__imp0: Arith[T],__imp2: Overload4) = densevector_prod[T](self)(implicitly[Manifest[T]],__pos,__imp0)
  def infix_min[T:Manifest](self: Rep[DenseVector[T]])(implicit __pos: SourceContext,__imp0: Ordering[T],__imp2: Overload6) = densevector_min[T](self)(implicitly[Manifest[T]],__pos,__imp0)
  def infix_max[T:Manifest](self: Rep[DenseVector[T]])(implicit __pos: SourceContext,__imp0: Ordering[T],__imp2: Overload6) = densevector_max[T](self)(implicitly[Manifest[T]],__pos,__imp0)
  def infix_minIndex[T:Manifest](self: Rep[DenseVector[T]])(implicit __pos: SourceContext,__imp0: Ordering[T],__imp1: Arith[T],__imp3: Overload4) = densevector_minindex[T](self)(implicitly[Manifest[T]],__pos,__imp0,__imp1)
  def infix_maxIndex[T:Manifest](self: Rep[DenseVector[T]])(implicit __pos: SourceContext,__imp0: Ordering[T],__imp1: Arith[T],__imp3: Overload4) = densevector_maxindex[T](self)(implicitly[Manifest[T]],__pos,__imp0,__imp1)
  def infix_prefixSum[T:Manifest](self: Rep[DenseVector[T]])(implicit __pos: SourceContext,__imp0: Arith[T],__imp2: Overload3) = densevector_prefixsum[T](self)(implicitly[Manifest[T]],__pos,__imp0)

  def densevector_object_apply[T:Manifest](__arg0: Rep[Int],__arg1: Rep[Boolean])(implicit __pos: SourceContext,__imp1: Overload24): Rep[DenseVector[T]]
  def densevector_object_apply[T:Manifest](__arg0: Seq[Rep[T]])(implicit __pos: SourceContext,__imp1: Overload25): Rep[DenseVector[T]]
  def densevector_object_zeros(__arg0: Rep[Int])(implicit __pos: SourceContext): Rep[DenseVector[Double]]
  def densevector_object_zerosf(__arg0: Rep[Int])(implicit __pos: SourceContext): Rep[DenseVector[Float]]
  def densevector_object_ones(__arg0: Rep[Int])(implicit __pos: SourceContext): Rep[DenseVector[Double]]
  def densevector_object_onesf(__arg0: Rep[Int])(implicit __pos: SourceContext): Rep[DenseVector[Float]]
  def densevector_object_rand(__arg0: Rep[Int])(implicit __pos: SourceContext): Rep[DenseVector[Double]]
  def densevector_object_randf(__arg0: Rep[Int])(implicit __pos: SourceContext): Rep[DenseVector[Float]]
  def densevector_object_uniform(start: Rep[Int],step_size: Rep[Double],end: Rep[Int],isRow: Rep[Boolean] = unit(true))(implicit __pos: SourceContext): Rep[DenseVector[Double]]
  def densevector_object_flatten[T:Manifest](pieces: Rep[DenseVector[DenseVector[T]]])(implicit __pos: SourceContext): Rep[DenseVector[T]]
  def densevector_tovector[T:Manifest,R:Manifest](__arg0: Rep[ForgeHashMap[T,R]])(implicit __pos: SourceContext): Rep[DenseVector[R]]
  def densevector_length[T:Manifest](self: Rep[DenseVector[T]])(implicit __pos: SourceContext): Rep[Int]
  def densevector_isrow[T:Manifest](self: Rep[DenseVector[T]])(implicit __pos: SourceContext): Rep[Boolean]
  def densevector_apply[T:Manifest](self: Rep[DenseVector[T]],__arg1: Rep[Int])(implicit __pos: SourceContext,__imp1: Overload27): Rep[T]
  def densevector_apply[T:Manifest](self: Rep[DenseVector[T]],__arg1: Rep[IndexVector])(implicit __pos: SourceContext,__imp1: Overload28): Rep[DenseVector[T]]
  def densevector_t[T:Manifest](self: Rep[DenseVector[T]])(implicit __pos: SourceContext): Rep[DenseVector[T]]
  def densevector_mt[T:Manifest](self: Rep[DenseVector[T]])(implicit __pos: SourceContext): Rep[Unit]
  def densevector_tomat[T:Manifest](self: Rep[DenseVector[T]])(implicit __pos: SourceContext): Rep[DenseMatrix[T]]
  def densevector_clone[T:Manifest](self: Rep[DenseVector[T]])(implicit __pos: SourceContext): Rep[DenseVector[T]]
  def densevector_update[T:Manifest](self: Rep[DenseVector[T]],i: Rep[Int],e: Rep[T])(implicit __pos: SourceContext,__imp1: Overload10): Rep[Unit]
  def densevector_update[T:Manifest](self: Rep[DenseVector[T]],indices: Rep[IndexVector],e: Rep[T])(implicit __pos: SourceContext,__imp1: Overload11): Rep[Unit]
  def densevector_update[T:Manifest](self: Rep[DenseVector[T]],indices: Rep[IndexVector],v: Rep[DenseVector[T]])(implicit __pos: SourceContext,__imp1: Overload12): Rep[Unit]
  def densevector_ltlt[T:Manifest](self: Rep[DenseVector[T]],__arg1: Rep[T])(implicit __pos: SourceContext,__imp1: Overload7): Rep[DenseVector[T]]
  def densevector_ltlt[T:Manifest](self: Rep[DenseVector[T]],__arg1: Rep[DenseVector[T]])(implicit __pos: SourceContext,__imp1: Overload8): Rep[DenseVector[T]]
  def densevector_ltlteq[T:Manifest](self: Rep[DenseVector[T]],__arg1: Rep[T])(implicit __pos: SourceContext,__imp1: Overload6): Rep[Unit]
  def densevector_ltlteq[T:Manifest](self: Rep[DenseVector[T]],__arg1: Rep[DenseVector[T]])(implicit __pos: SourceContext,__imp1: Overload7): Rep[Unit]
  def densevector_insert[T:Manifest](self: Rep[DenseVector[T]],__arg1: Rep[Int],__arg2: Rep[T])(implicit __pos: SourceContext): Rep[Unit]
  def densevector_insertall[T:Manifest](self: Rep[DenseVector[T]],__arg1: Rep[Int],__arg2: Rep[DenseVector[T]])(implicit __pos: SourceContext): Rep[Unit]
  def densevector_remove[T:Manifest](self: Rep[DenseVector[T]],__arg1: Rep[Int])(implicit __pos: SourceContext): Rep[Unit]
  def densevector_removeall[T:Manifest](self: Rep[DenseVector[T]],pos: Rep[Int],len: Rep[Int])(implicit __pos: SourceContext): Rep[Unit]
  def densevector_copyfrom[T:Manifest](self: Rep[DenseVector[T]],__arg1: Rep[Int],__arg2: Rep[DenseVector[T]])(implicit __pos: SourceContext): Rep[Unit]
  def densevector_trim[T:Manifest](self: Rep[DenseVector[T]])(implicit __pos: SourceContext): Rep[Unit]
  def densevector_clear[T:Manifest](self: Rep[DenseVector[T]])(implicit __pos: SourceContext): Rep[Unit]
  def densevector_pleq[T:Manifest](self: Rep[DenseVector[T]],__arg1: Rep[DenseVector[T]])(implicit __pos: SourceContext,__imp0: Arith[T],__imp2: Overload3): Rep[Unit]
  def densevector_pleq[T:Manifest](self: Rep[DenseVector[T]],__arg1: Rep[T])(implicit __pos: SourceContext,__imp0: Arith[T],__imp2: Overload4): Rep[Unit]
  def densevector_pleq[T:Manifest](self: Rep[DenseVector[T]],__arg1: Rep[DenseVectorView[T]])(implicit __pos: SourceContext,__imp0: Arith[T],__imp2: Overload5): Rep[Unit]
  def densevector_muleq[T:Manifest](self: Rep[DenseVector[T]],__arg1: Rep[DenseVector[T]])(implicit __pos: SourceContext,__imp0: Arith[T],__imp2: Overload3): Rep[Unit]
  def densevector_muleq[T:Manifest](self: Rep[DenseVector[T]],__arg1: Rep[T])(implicit __pos: SourceContext,__imp0: Arith[T],__imp2: Overload4): Rep[Unit]
  def densevector_muleq[T:Manifest](self: Rep[DenseVector[T]],__arg1: Rep[DenseVectorView[T]])(implicit __pos: SourceContext,__imp0: Arith[T],__imp2: Overload5): Rep[Unit]
  def densevector_subeq[T:Manifest](self: Rep[DenseVector[T]],__arg1: Rep[DenseVector[T]])(implicit __pos: SourceContext,__imp0: Arith[T],__imp2: Overload3): Rep[Unit]
  def densevector_subeq[T:Manifest](self: Rep[DenseVector[T]],__arg1: Rep[T])(implicit __pos: SourceContext,__imp0: Arith[T],__imp2: Overload4): Rep[Unit]
  def densevector_subeq[T:Manifest](self: Rep[DenseVector[T]],__arg1: Rep[DenseVectorView[T]])(implicit __pos: SourceContext,__imp0: Arith[T],__imp2: Overload5): Rep[Unit]
  def densevector_diveq[T:Manifest](self: Rep[DenseVector[T]],__arg1: Rep[DenseVector[T]])(implicit __pos: SourceContext,__imp0: Arith[T],__imp2: Overload3): Rep[Unit]
  def densevector_diveq[T:Manifest](self: Rep[DenseVector[T]],__arg1: Rep[T])(implicit __pos: SourceContext,__imp0: Arith[T],__imp2: Overload4): Rep[Unit]
  def densevector_diveq[T:Manifest](self: Rep[DenseVector[T]],__arg1: Rep[DenseVectorView[T]])(implicit __pos: SourceContext,__imp0: Arith[T],__imp2: Overload5): Rep[Unit]
  def densevector_sort[T:Manifest](self: Rep[DenseVector[T]])(implicit __pos: SourceContext,__imp0: Ordering[T]): Rep[DenseVector[T]]
  def densevector_sortby[T:Manifest,B:Manifest](self: Rep[DenseVector[T]],__arg1: (Rep[T]) => Rep[B])(implicit __pos: SourceContext,__imp0: Ordering[B]): Rep[DenseVector[T]]
  def densevector_sortwithindex[T:Manifest](self: Rep[DenseVector[T]])(implicit __pos: SourceContext,__imp0: Ordering[T]): Tuple2[Rep[DenseVector[T]],Rep[IndexVector]]
  def densevector_median[T:Manifest](self: Rep[DenseVector[T]])(implicit __pos: SourceContext,__imp0: Numeric[T],__imp1: Ordering[T]): Rep[T]
  def densevector_clngt[T:Manifest](self: Rep[DenseVector[T]],__arg1: Rep[DenseVector[T]])(implicit __pos: SourceContext,__imp0: Ordering[T]): Rep[DenseVector[Boolean]]
  def densevector_clnlt[T:Manifest](self: Rep[DenseVector[T]],__arg1: Rep[DenseVector[T]])(implicit __pos: SourceContext,__imp0: Ordering[T]): Rep[DenseVector[Boolean]]
  def densevector___equal[T:Manifest](self: Rep[DenseVector[T]],__arg1: Rep[DenseVector[T]])(implicit __pos: SourceContext,__imp1: Overload12): Rep[Boolean]
  def densevector___equal[T:Manifest](self: Rep[DenseVector[T]],__arg1: Rep[DenseVectorView[T]])(implicit __pos: SourceContext,__imp1: Overload13): Rep[Boolean]
  def densevector___equal[T:Manifest](self: Rep[DenseVector[T]],__arg1: Rep[IndexVector])(implicit __pos: SourceContext,__imp1: Overload14): Rep[Boolean]
  def densevector___equal[T:Manifest](self: Rep[DenseVector[T]],__arg1: Rep[SparseVector[T]])(implicit __pos: SourceContext,__imp1: Overload15): Rep[Boolean]
  def densevector_groupbyreduce[T:Manifest,K:Manifest,V:Manifest](self: Rep[DenseVector[T]],__arg1: (Rep[T]) => Rep[K],__arg2: (Rep[T]) => Rep[V],__arg3: (Rep[V],Rep[V]) => Rep[V])(implicit __pos: SourceContext,__imp0: Arith[V]): Rep[ForgeHashMap[K,V]]
  def densevector_groupby[T:Manifest,K:Manifest,V:Manifest](self: Rep[DenseVector[T]],__arg1: (Rep[T]) => Rep[K],__arg2: (Rep[T]) => Rep[V])(implicit __pos: SourceContext): Rep[ForgeHashMap[K,DenseVector[V]]]
  def densevector_filter[T:Manifest](self: Rep[DenseVector[T]],__arg1: (Rep[T]) => Rep[Boolean])(implicit __pos: SourceContext): Rep[DenseVector[T]]
  def densevector_toboolean[T:Manifest](self: Rep[DenseVector[T]])(implicit __pos: SourceContext,conv: (Rep[T]) => Rep[Boolean]): Rep[DenseVector[Boolean]]
  def densevector_todouble[T:Manifest](self: Rep[DenseVector[T]])(implicit __pos: SourceContext,conv: (Rep[T]) => Rep[Double]): Rep[DenseVector[Double]]
  def densevector_tofloat[T:Manifest](self: Rep[DenseVector[T]])(implicit __pos: SourceContext,conv: (Rep[T]) => Rep[Float]): Rep[DenseVector[Float]]
  def densevector_toint[T:Manifest](self: Rep[DenseVector[T]])(implicit __pos: SourceContext,conv: (Rep[T]) => Rep[Int]): Rep[DenseVector[Int]]
  def densevector_indices[T:Manifest](self: Rep[DenseVector[T]])(implicit __pos: SourceContext): Rep[IndexVector]
  def densevector_isempty[T:Manifest](self: Rep[DenseVector[T]])(implicit __pos: SourceContext): Rep[Boolean]
  def densevector_first[T:Manifest](self: Rep[DenseVector[T]])(implicit __pos: SourceContext): Rep[T]
  def densevector_last[T:Manifest](self: Rep[DenseVector[T]])(implicit __pos: SourceContext): Rep[T]
  def densevector_drop[T:Manifest](self: Rep[DenseVector[T]],__arg1: Rep[Int])(implicit __pos: SourceContext): Rep[DenseVector[T]]
  def densevector_take[T:Manifest](self: Rep[DenseVector[T]],__arg1: Rep[Int])(implicit __pos: SourceContext): Rep[DenseVector[T]]
  def densevector_contains[T:Manifest](self: Rep[DenseVector[T]],__arg1: Rep[T])(implicit __pos: SourceContext): Rep[Boolean]
  def densevector_distinct[T:Manifest](self: Rep[DenseVector[T]])(implicit __pos: SourceContext): Rep[DenseVector[T]]
  def densevector_mutable[T:Manifest](self: Rep[DenseVector[T]])(implicit __pos: SourceContext): Rep[DenseVector[T]]
  def densevector_replicate[T:Manifest](self: Rep[DenseVector[T]],__arg1: Rep[Int],__arg2: Rep[Int])(implicit __pos: SourceContext): Rep[DenseMatrix[T]]
  def densevector_makestring[T:Manifest](self: Rep[DenseVector[T]])(implicit __pos: SourceContext,__imp0: Stringable[T]): Rep[String]
  def densevector_tostring[T:Manifest](self: Rep[DenseVector[T]]): Rep[String]
  def densevector_pprint[T:Manifest](self: Rep[DenseVector[T]])(implicit __pos: SourceContext,__imp0: Stringable[T]): Rep[Unit]
  def densevector_pl[T:Manifest](self: Rep[DenseVector[T]],__arg1: Rep[DenseVector[T]])(implicit __pos: SourceContext,__imp0: Arith[T],__imp2: Overload131): Rep[DenseVector[T]]
  def densevector_sub[T:Manifest](self: Rep[DenseVector[T]],__arg1: Rep[DenseVector[T]])(implicit __pos: SourceContext,__imp0: Arith[T],__imp2: Overload97): Rep[DenseVector[T]]
  def densevector_mul[T:Manifest](self: Rep[DenseVector[T]],__arg1: Rep[DenseVector[T]])(implicit __pos: SourceContext,__imp0: Arith[T],__imp2: Overload136): Rep[DenseVector[T]]
  def densevector_mulclnmul[T:Manifest](self: Rep[DenseVector[T]],__arg1: Rep[DenseVector[T]])(implicit __pos: SourceContext,__imp0: Arith[T],__imp2: Overload22): Rep[T]
  def densevector_mulmul[T:Manifest](self: Rep[DenseVector[T]],__arg1: Rep[DenseVector[T]])(implicit __pos: SourceContext,__imp0: Arith[T],__imp2: Overload10): Rep[DenseMatrix[T]]
  def densevector_div[T:Manifest](self: Rep[DenseVector[T]],__arg1: Rep[DenseVector[T]])(implicit __pos: SourceContext,__imp0: Arith[T],__imp2: Overload98): Rep[DenseVector[T]]
  def densevector_pl[T:Manifest](self: Rep[DenseVector[T]],__arg1: Rep[DenseVectorView[T]])(implicit __pos: SourceContext,__imp0: Arith[T],__imp2: Overload132): Rep[DenseVector[T]]
  def densevector_sub[T:Manifest](self: Rep[DenseVector[T]],__arg1: Rep[DenseVectorView[T]])(implicit __pos: SourceContext,__imp0: Arith[T],__imp2: Overload98): Rep[DenseVector[T]]
  def densevector_mul[T:Manifest](self: Rep[DenseVector[T]],__arg1: Rep[DenseVectorView[T]])(implicit __pos: SourceContext,__imp0: Arith[T],__imp2: Overload137): Rep[DenseVector[T]]
  def densevector_dot_densevectorview[T:Manifest](self: Rep[DenseVector[T]],__arg1: Rep[DenseVectorView[T]])(implicit __pos: SourceContext,__imp0: Arith[T]): Rep[T]
  def densevector_mulmul[T:Manifest](self: Rep[DenseVector[T]],__arg1: Rep[DenseVectorView[T]])(implicit __pos: SourceContext,__imp0: Arith[T],__imp2: Overload11): Rep[DenseMatrix[T]]
  def densevector_div[T:Manifest](self: Rep[DenseVector[T]],__arg1: Rep[DenseVectorView[T]])(implicit __pos: SourceContext,__imp0: Arith[T],__imp2: Overload99): Rep[DenseVector[T]]
  def densevector_pl[T:Manifest](self: Rep[DenseVector[T]],__arg1: Rep[SparseVector[T]])(implicit __pos: SourceContext,__imp0: Arith[T],__imp2: Overload133): Rep[DenseVector[T]]
  def densevector_sub[T:Manifest](self: Rep[DenseVector[T]],__arg1: Rep[SparseVector[T]])(implicit __pos: SourceContext,__imp0: Arith[T],__imp2: Overload99): Rep[DenseVector[T]]
  def densevector_mul[T:Manifest](self: Rep[DenseVector[T]],__arg1: Rep[SparseVector[T]])(implicit __pos: SourceContext,__imp0: Arith[T],__imp2: Overload138): Rep[DenseVector[T]]
  def densevector_mulclnmul[T:Manifest](self: Rep[DenseVector[T]],__arg1: Rep[SparseVector[T]])(implicit __pos: SourceContext,__imp0: Arith[T],__imp2: Overload24): Rep[T]
  def densevector_mulmul[T:Manifest](self: Rep[DenseVector[T]],__arg1: Rep[SparseVector[T]])(implicit __pos: SourceContext,__imp0: Arith[T],__imp2: Overload12): Rep[DenseMatrix[T]]
  def densevector_div[T:Manifest](self: Rep[DenseVector[T]],__arg1: Rep[SparseVector[T]])(implicit __pos: SourceContext,__imp0: Arith[T],__imp2: Overload100): Rep[DenseVector[T]]
  def densevector_pl[T:Manifest](self: Rep[DenseVector[T]],__arg1: Rep[SparseVectorView[T]])(implicit __pos: SourceContext,__imp0: Arith[T],__imp2: Overload134): Rep[DenseVector[T]]
  def densevector_sub[T:Manifest](self: Rep[DenseVector[T]],__arg1: Rep[SparseVectorView[T]])(implicit __pos: SourceContext,__imp0: Arith[T],__imp2: Overload100): Rep[DenseVector[T]]
  def densevector_mul[T:Manifest](self: Rep[DenseVector[T]],__arg1: Rep[SparseVectorView[T]])(implicit __pos: SourceContext,__imp0: Arith[T],__imp2: Overload139): Rep[DenseVector[T]]
  def densevector_mulclnmul[T:Manifest](self: Rep[DenseVector[T]],__arg1: Rep[SparseVectorView[T]])(implicit __pos: SourceContext,__imp0: Arith[T],__imp2: Overload25): Rep[T]
  def densevector_mulmul[T:Manifest](self: Rep[DenseVector[T]],__arg1: Rep[SparseVectorView[T]])(implicit __pos: SourceContext,__imp0: Arith[T],__imp2: Overload13): Rep[DenseMatrix[T]]
  def densevector_div[T:Manifest](self: Rep[DenseVector[T]],__arg1: Rep[SparseVectorView[T]])(implicit __pos: SourceContext,__imp0: Arith[T],__imp2: Overload101): Rep[DenseVector[T]]
  def densevector_zip[T:Manifest,B:Manifest,R:Manifest](self: Rep[DenseVector[T]],__arg1: Rep[DenseVector[B]],__arg2: (Rep[T],Rep[B]) => Rep[R])(implicit __pos: SourceContext,__imp1: Overload6): Rep[DenseVector[R]]
  def densevector_zip[T:Manifest,B:Manifest,R:Manifest](self: Rep[DenseVector[T]],__arg1: Rep[DenseVectorView[B]],__arg2: (Rep[T],Rep[B]) => Rep[R])(implicit __pos: SourceContext,__imp1: Overload7): Rep[DenseVector[R]]
  def densevector_pl[T:Manifest](self: Rep[DenseVector[T]],__arg1: Rep[T])(implicit __pos: SourceContext,__imp0: Arith[T],__imp2: Overload135): Rep[DenseVector[T]]
  def densevector_sub[T:Manifest](self: Rep[DenseVector[T]],__arg1: Rep[T])(implicit __pos: SourceContext,__imp0: Arith[T],__imp2: Overload101): Rep[DenseVector[T]]
  def densevector_mul[T:Manifest](self: Rep[DenseVector[T]],__arg1: Rep[T])(implicit __pos: SourceContext,__imp0: Arith[T],__imp2: Overload140): Rep[DenseVector[T]]
  def densevector_mul[T:Manifest](self: Rep[DenseVector[T]],__arg1: Rep[DenseMatrix[T]])(implicit __pos: SourceContext,__imp0: Arith[T],__imp2: Overload141): Rep[DenseVector[T]]
  def densevector_div[T:Manifest](self: Rep[DenseVector[T]],__arg1: Rep[T])(implicit __pos: SourceContext,__imp0: Arith[T],__imp2: Overload102): Rep[DenseVector[T]]
  def densevector_abs[T:Manifest](self: Rep[DenseVector[T]])(implicit __pos: SourceContext,__imp0: Arith[T]): Rep[DenseVector[T]]
  def densevector_exp[T:Manifest](self: Rep[DenseVector[T]])(implicit __pos: SourceContext,__imp0: Arith[T]): Rep[DenseVector[T]]
  def densevector_log[T:Manifest](self: Rep[DenseVector[T]])(implicit __pos: SourceContext,__imp0: Arith[T]): Rep[DenseVector[T]]
  def densevector_sum[T:Manifest](self: Rep[DenseVector[T]])(implicit __pos: SourceContext,__imp0: Arith[T]): Rep[T]
  def densevector_prod[T:Manifest](self: Rep[DenseVector[T]])(implicit __pos: SourceContext,__imp0: Arith[T]): Rep[T]
  def densevector_mean[T:Manifest](self: Rep[DenseVector[T]])(implicit __pos: SourceContext,conv: (Rep[T]) => Rep[Double]): Rep[Double]
  def densevector_min[T:Manifest](self: Rep[DenseVector[T]])(implicit __pos: SourceContext,__imp0: Ordering[T]): Rep[T]
  def densevector_max[T:Manifest](self: Rep[DenseVector[T]])(implicit __pos: SourceContext,__imp0: Ordering[T]): Rep[T]
  def densevector_minindex[T:Manifest](self: Rep[DenseVector[T]])(implicit __pos: SourceContext,__imp0: Ordering[T],__imp1: Arith[T]): Rep[Int]
  def densevector_maxindex[T:Manifest](self: Rep[DenseVector[T]])(implicit __pos: SourceContext,__imp0: Ordering[T],__imp1: Arith[T]): Rep[Int]
  def densevector_map[T:Manifest,R:Manifest](self: Rep[DenseVector[T]],__arg1: (Rep[T]) => Rep[R])(implicit __pos: SourceContext): Rep[DenseVector[R]]
  def densevector_reduce[T:Manifest](self: Rep[DenseVector[T]],__arg1: (Rep[T],Rep[T]) => Rep[T])(implicit __pos: SourceContext,__imp0: Arith[T]): Rep[T]
  def densevector_foreach[T:Manifest](self: Rep[DenseVector[T]],__arg1: (Rep[T]) => Rep[Unit])(implicit __pos: SourceContext): Rep[Unit]
  def densevector_find[T:Manifest](self: Rep[DenseVector[T]],__arg1: (Rep[T]) => Rep[Boolean])(implicit __pos: SourceContext): Rep[IndexVector]
  def densevector_count[T:Manifest](self: Rep[DenseVector[T]],__arg1: (Rep[T]) => Rep[Boolean])(implicit __pos: SourceContext): Rep[Int]
  def densevector_partition[T:Manifest](self: Rep[DenseVector[T]],pred: (Rep[T]) => Rep[Boolean])(implicit __pos: SourceContext): Rep[Tup2[DenseVector[T],DenseVector[T]]]
  def densevector_flatmap[T:Manifest,R:Manifest](self: Rep[DenseVector[T]],__arg1: (Rep[T]) => Rep[DenseVector[R]])(implicit __pos: SourceContext): Rep[DenseVector[R]]
  def densevector_scan[T:Manifest,R:Manifest](self: Rep[DenseVector[T]],zero: Rep[R],__arg2: (Rep[R],Rep[T]) => Rep[R])(implicit __pos: SourceContext): Rep[DenseVector[R]]
  def densevector_prefixsum[T:Manifest](self: Rep[DenseVector[T]])(implicit __pos: SourceContext,__imp0: Arith[T]): Rep[DenseVector[T]]
  def densevector_dist(__arg0: Rep[DenseVector[Double]],__arg1: Rep[DenseVector[Double]],__arg2: DistanceMetric)(implicit __pos: SourceContext): Rep[Double]
}
trait DenseVectorCompilerOps extends DenseVectorOps {
  this: OptiML => 

  def densevector_alloc_raw[T:Manifest](__arg0: Rep[Int],__arg1: Rep[Boolean],__arg2: Rep[ForgeArray[T]])(implicit __pos: SourceContext): Rep[DenseVector[T]]
  def densevector_fromarray[T:Manifest](__arg0: Rep[ForgeArray[T]],__arg1: Rep[Boolean])(implicit __pos: SourceContext): Rep[DenseVector[T]]
  def densevector_fromfunc[T:Manifest](__arg0: Rep[Int],__arg1: (Rep[Int]) => Rep[T])(implicit __pos: SourceContext): Rep[DenseVector[T]]
  def densevector_precumulate[T:Manifest](v: Rep[DenseVector[T]],identity: Rep[T],func: (Rep[T],Rep[T]) => Rep[T])(implicit __pos: SourceContext): Rep[Tup2[T,DenseVector[T]]]
  def densevector_dc_alloc[R:Manifest,CR:Manifest](__arg0: Rep[CR],__arg1: Rep[Int])(implicit __pos: SourceContext): Rep[DenseVector[R]]
  def densevector_sortindex_helper[T:Manifest](__arg0: Rep[Int],__arg1: Rep[Int],__arg2: Rep[ForgeArray[T]])(implicit __pos: SourceContext,__imp0: Ordering[T]): Rep[ForgeArray[Int]]
  def densevector_groupby_helper[T:Manifest,K:Manifest,V:Manifest](__arg0: Rep[DenseVector[T]],__arg1: (Rep[T]) => Rep[K],__arg2: (Rep[T]) => Rep[V])(implicit __pos: SourceContext): Rep[ForgeHashMap[K,ForgeArrayBuffer[V]]]
  def densevector_raw_data[T:Manifest](self: Rep[DenseVector[T]])(implicit __pos: SourceContext): Rep[ForgeArray[T]]
  def densevector_set_raw_data[T:Manifest](self: Rep[DenseVector[T]],__arg1: Rep[ForgeArray[T]])(implicit __pos: SourceContext): Rep[Unit]
  def densevector_set_length[T:Manifest](self: Rep[DenseVector[T]],__arg1: Rep[Int])(implicit __pos: SourceContext): Rep[Unit]
  def densevector_set_isrow[T:Manifest](self: Rep[DenseVector[T]],__arg1: Rep[Boolean])(implicit __pos: SourceContext): Rep[Unit]
  def densevector_insertspace[T:Manifest](self: Rep[DenseVector[T]],pos: Rep[Int],len: Rep[Int])(implicit __pos: SourceContext): Rep[Unit]
  def densevector_ensureextra[T:Manifest](self: Rep[DenseVector[T]],extra: Rep[Int])(implicit __pos: SourceContext): Rep[Unit]
  def densevector_realloc[T:Manifest](self: Rep[DenseVector[T]],minLen: Rep[Int])(implicit __pos: SourceContext): Rep[Unit]
  def densevector_appendable[T:Manifest](self: Rep[DenseVector[T]],__arg1: Rep[Int],__arg2: Rep[T])(implicit __pos: SourceContext): Rep[Boolean]
  def densevector_append[T:Manifest](self: Rep[DenseVector[T]],__arg1: Rep[Int],__arg2: Rep[T])(implicit __pos: SourceContext): Rep[Unit]
  def densevector_copy[T:Manifest](self: Rep[DenseVector[T]],__arg1: Rep[Int],__arg2: Rep[DenseVector[T]],__arg3: Rep[Int],__arg4: Rep[Int])(implicit __pos: SourceContext): Rep[Unit]
  def densevector_densevector_filter_map[T:Manifest,R:Manifest](self: Rep[DenseVector[T]],__arg1: (Rep[T]) => Rep[Boolean],__arg2: (Rep[T]) => Rep[R])(implicit __pos: SourceContext): Rep[DenseVector[R]]
}

